import os
from threading import Condition, local
from telebot.types import KeyboardButton, Message, ReplyKeyboardMarkup
from telebot import types
from background import keep_alive #–∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
import pip
from telegram.constants import ParseMode
from PIL import Image
from io import BytesIO
import requests
from bs4 import BeautifulSoup
from telegram.ext import Updater, CommandHandler
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from datetime import datetime, timedelta
pip.main(['install', 'pytelegrambotapi'])
import pytaf
import telebot, apihelper
from telebot import types
from telebot.types import InputMediaPhoto
import telegram
import python-template
import time
import locale
import pytz
from urllib import request
import concurrent.futures
import pandas as pd
import re
import json
import csv
import logging
import random

bot = telebot.TeleBot('7308011756:AAEj5V6c2lC_JlxUNJLW5e1Feji_VpgB7GY', skip_pending=True)
ADMIN_ID = 1117968372  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
weather_url = 'http://api.weatherapi.com/v1'
api_key = 'cacfd66797d643b8bf6193226220101'
lang = 'ru'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
user_guess_temp_state = {}

# –ò–º—è —Ñ–∞–π–ª–∞, –≥–¥–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö
CITIES_FILE = 'cities.csv'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ CSV
def save_city(user_id, city_name):
    user_id = str(user_id)
    city_name = city_name.strip()

    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if not os.path.exists(CITIES_FILE):
        with open(CITIES_FILE, mode='w', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(['user_id', 'city'])

    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    data = {}
    with open(CITIES_FILE, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        for row in reader:
            if len(row) == 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
                data[row[0]] = row[1]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data[user_id] = city_name

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    with open(CITIES_FILE, mode='w', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow(['user_id', 'city'])  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        for uid, city in data.items():
            writer.writerow([uid, city])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ CSV
def load_city(user_id):
    user_id = str(user_id)
    if not os.path.exists(CITIES_FILE):
        return None
    with open(CITIES_FILE, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        for row in reader:
            if len(row) == 2 and row[0] == user_id:
                return row[1]
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def log_user_activity(user_id, username, action):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    user_id = str(user_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    action = action.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    file_exists = os.path.exists('user_statistics.csv')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º –≤ —Ñ–∞–π–ª–µ
    if file_exists:
        with open('user_statistics.csv', mode='r', encoding='utf-8') as file:
            reader = csv.reader(file)
            next(reader, None)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for row in reader:
                if len(row) >= 3 and row[0] == user_id and row[2] == action:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                    return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    with open('user_statistics.csv', mode='a', encoding='utf-8', newline='') as file:
        writer = csv.writer(file)
        if not file_exists:
            writer.writerow(['User ID', 'Username', 'Action', 'Timestamp'])  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        writer.writerow([user_id, username, action, current_time])


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–Ω—Ç–∏—Ñ–ª—É–¥)
user_requests = {}  # –§–æ—Ä–º–∞—Ç: {user_id: {'last_request_time': float, 'request_count': int}}
FLOOD_LIMIT = 5      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
FLOOD_INTERVAL = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞)

# –ê–Ω—Ç–∏—Ñ–ª—É–¥-—Ñ—É–Ω–∫—Ü–∏—è
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–Ω—Ç–∏—Ñ–ª—É–¥)
user_requests = {}  # –§–æ—Ä–º–∞—Ç: {user_id: {'last_request_time': float, 'request_count': int, 'is_blocked': bool, 'block_until': float}}
FLOOD_LIMIT = 12     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
FLOOD_INTERVAL = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞)
BLOCK_TIME = 60       # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞)

# –ê–Ω—Ç–∏—Ñ–ª—É–¥-—Ñ—É–Ω–∫—Ü–∏—è
def is_flooding(user_id):
    current_time = time.time()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
    if user_id not in user_requests:
        user_requests[user_id] = {
            'last_request_time': current_time,
            'request_count': 1,
            'is_blocked': False,
            'block_until': 0
        }
        return False

    user_data = user_requests[user_id]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å—Ç—ë–∫ –ª–∏ —Å—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if user_data['is_blocked']:
        if current_time >= user_data['block_until']:
            # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            user_data['is_blocked'] = False
            user_data['request_count'] = 1
            user_data['last_request_time'] = current_time
            return False
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            return True

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    time_since_last_request = current_time - user_data['last_request_time']

    if time_since_last_request > FLOOD_INTERVAL:
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏, —Å–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫
        user_data['request_count'] = 1
        user_data['last_request_time'] = current_time
        return False

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    user_data['request_count'] += 1
    user_data['last_request_time'] = current_time

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    if user_data['request_count'] > FLOOD_LIMIT:
        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ BLOCK_TIME
        user_data['is_blocked'] = True
        user_data['block_until'] = current_time + BLOCK_TIME
        return True

def load_city_data(file_path):
    city_data = []
    with open(file_path, mode='r', encoding='utf-8', newline='') as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            city_data.append({'eng_name': row[0].strip(), 'rus_name': row[1].strip(), 'url': row[2].strip()})
    return city_data
  
city_data = load_city_data('city_data.csv')

@bot.message_handler(commands=['start'])
def get_text_message(message):
  # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  log_user_activity(message.from_user.id, message.from_user.username, '/start')

  markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
  btn1 = KeyboardButton('üö®–ü–æ–º–æ—â—å')
  btn2 = KeyboardButton('üó∫Ô∏è–†–∞–¥–∞—Ä')
  btn3 = KeyboardButton('‚õÖ–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å')
  btn4 = KeyboardButton('üìÜ–ü–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è')
  btn5 = KeyboardButton('üå´Ô∏è–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞')
  btn6 = KeyboardButton('üéÅ–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å')
  btn7 = KeyboardButton('üì¢–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º')
  btn8 = KeyboardButton('‚úàÔ∏è–ü–æ–≥–æ–¥–∞ –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö')
  btn9 = KeyboardButton('üìç–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é')
  btn10 = KeyboardButton('üìä–ú–µ—Ç–µ–æ–≥—Ä–∞–º–º—ã –ì–ú–¶')
  btn11 = KeyboardButton('‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥')
  markup.row(btn1, btn2)
  markup.row(btn8, btn5)
  markup.row(btn3, btn4)
  markup.row(btn6, btn7)
  markup.row(btn10)
  markup.row(btn9)
  markup.row(btn11)

  bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –ø–æ–≥–æ–¥—ã PogodaRadar. –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ –ø–æ–≥–æ–¥–µ –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!üòäüå¶Ô∏è', reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
      user_id = message.from_user.id
      if is_flooding(user_id):
        bot.send_message(user_id, "‚ö†Ô∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 1 –º–∏–Ω—É—Ç—É –∏–∑-–∑–∞ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return
      if message.text == 'üö®–ü–æ–º–æ—â—å' or message.text == '/help':
        get_help(message)
      elif message.text == 'üó∫Ô∏è–†–∞–¥–∞—Ä' or message.text == '/radarmap':
        get_radar_map(message)
      elif message.text == '‚õÖ–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å' or message.text == '/nowweather':
        now_weather(message)
      elif message.text == 'üìÜ–ü–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è' or message.text == '/forecastweather':
        forecast_weather(message)
      elif message.text == '‚úàÔ∏è–ü–æ–≥–æ–¥–∞ –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö' or message.text == '/weatherairports':
        get_airport_weather(message)
      elif message.text == 'üå´Ô∏è–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞' or message.text == '/aqi':
        get_city_aqi(message)
      elif message.text == 'üéÅ–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å' or message.text == '/donate':
        get_donate(message)
      elif message.text == 'üì¢–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º' or message.text == '/share':
        get_share(message)
      elif message.text == 'üìä–ú–µ—Ç–µ–æ–≥—Ä–∞–º–º—ã –ì–ú–¶' or message.text == '/meteograms':
        start_meteogram_request(message)
      elif message.text == 'üìç–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é':
        get_location(message)
      elif message.text == '‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥' or message.text == '/setcity':
        set_city(message)
      elif message.text == '/precipitationmap':
        get_precipitation_map(message)
      elif message.text == '/alerts':
        alerts_weather(message)
      elif message.text == '/anomaltempmap':
        get_anomal_temp_map(message)
      elif message.text == '/weatherwebsites':
        websites_weather(message)
      elif message.text == '/tempwatermap':
        get_tempwater_map(message)
      elif message.text == '/verticaltemplayer':
        get_vertical_temp(message)
      elif message.text == '/firehazard_map':
        get_firehazard_map(message)
      elif message.text == '/extrainfo':
        send_extrainfo(message)
      elif message.text == '/stations':
        send_weather_stations(message)
      elif message.text == '/get_meteoweb':
        get_map_command(message)
      elif message.text == '/support':
        get_support(message)
      elif message.text == '/stats':
        show_statistics(message)
      elif message.text == '/guess_temp':
        start_guess_temp(message)
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞

@bot.message_handler(commands=['guess_temp'])
def handle_guess_temp_command(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /guess_temp –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É.
    """
    start_guess_temp(message)

def start_guess_temp(message):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É".
    """
    user_id = message.from_user.id
    user_guess_temp_state[user_id] = {"target_temp": random.randint(-30, 40), "attempts": 0, "max_attempts": 5}

    bot.send_message(user_id, "üå°Ô∏è –Ø –∑–∞–≥–∞–¥–∞–ª —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç -30¬∞C –¥–æ 40¬∞C. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å –µ—ë –∑–∞ 5 –ø–æ–ø—ã—Ç–æ–∫!")
    bot.send_message(user_id, "‚ùì –í–≤–µ–¥–∏ —Å–≤–æ—é –¥–æ–≥–∞–¥–∫—É:")
    bot.register_next_step_handler(message, process_guess_temp)

def process_guess_temp(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É —É–≥–∞–¥–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É.
    """
    user_id = message.from_user.id
    if user_id not in user_guess_temp_state:
        bot.send_message(user_id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ /guess_temp, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    target_temp = user_guess_temp_state[user_id]["target_temp"]
    attempts = user_guess_temp_state[user_id]["attempts"]
    max_attempts = user_guess_temp_state[user_id]["max_attempts"]

    try:
        guess = int(message.text)
        attempts += 1

        if guess == target_temp:
            bot.send_message(user_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª –∑–∞ {attempts} –ø–æ–ø—ã—Ç–æ–∫. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ {target_temp}¬∞C!")
            del user_guess_temp_state[user_id]  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        else:
            if attempts >= max_attempts:
                bot.send_message(user_id, f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –ó–∞–≥–∞–¥–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±—ã–ª–∞ {target_temp}¬∞C.")
                del user_guess_temp_state[user_id]  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            else:
                difference = abs(target_temp - guess)
                hint = ""

                if difference > 20:
                    hint = "‚ùÑÔ∏è –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –±–ª–∏–∂–µ –∫ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."
                elif difference > 10:
                    hint = "üå¨Ô∏è –•–æ–ª–æ–¥–Ω–æ, –Ω–æ —É–∂–µ —Ç–µ–ø–ª–µ–µ!"
                elif difference > 5:
                    hint = "üå§Ô∏è –¢–µ–ø–ª–æ, –Ω–æ –º–æ–∂–Ω–æ –µ—â—ë –ª—É—á—à–µ!"
                else:
                    hint = "üî• –ì–æ—Ä—è—á–æ! –¢—ã –ø–æ—á—Ç–∏ —É–≥–∞–¥–∞–ª!"

                bot.send_message(user_id, f"{hint}\n‚ùì –ü–æ–ø—ã—Ç–∫–∞ {attempts} –∏–∑ {max_attempts}. –í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â—É—é –¥–æ–≥–∞–¥–∫—É:")
                user_guess_temp_state[user_id]["attempts"] = attempts
                bot.register_next_step_handler(message, process_guess_temp)
    except ValueError:
        bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, process_guess_temp)

# –ö–æ–º–∞–Ω–¥–∞ /setcity –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞
@bot.message_handler(commands=['setcity'])
def set_city(message):
    msg = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:')
    bot.register_next_step_handler(msg, save_user_city)


def save_user_city(message):
    city = message.text
    save_city(message.from_user.id, city)
    bot.send_message(message.from_user.id, f'–ì–æ—Ä–æ–¥ "{city}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@bot.message_handler(commands=['stats'])
def show_statistics(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        with open('user_statistics.csv', mode='r', encoding='utf-8') as file:
            reader = csv.reader(file)
            stats = list(reader)
            print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞: {len(stats)}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        if not stats or len(stats) == 1:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            bot.reply_to(message, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º:\n\n"
        for row in stats[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if len(row) >= 4:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                stats_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {row[1]} (ID: {row[0]})\n"
                stats_message += f"üïí –í—Ä–µ–º—è: {row[3]}\n"
                stats_message += f"üìù –î–µ–π—Å—Ç–≤–∏–µ: {row[2]}\n"
                stats_message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            else:
                print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–∞–π–ª–µ: {row}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        bot.reply_to(message, stats_message)
    except FileNotFoundError:
        bot.reply_to(message, "–§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    log_user_activity(message.from_user.id, message.from_user.username, f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.")


def get_location(message):
  keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
  button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
  keyboard.add(button_geo)
  bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)

@bot.message_handler(content_types=['location'])
def handle_location(message):
    lat = message.location.latitude
    lon = message.location.longitude
    geocoder_params = {'q': f'{lat},{lon}', 'key': api_key}
    try:
        geocoder_response = requests.get(f'{weather_url}/search.json', params=geocoder_params).json()
        if geocoder_response and 'name' in geocoder_response[0]:
            city_name = geocoder_response[0]['name']
            save_city(message.from_user.id, city_name)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ CSV
            now_weather_by_coords(message, city_name)

            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
            remove_keyboard = types.ReplyKeyboardRemove()
            bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!", reply_markup=remove_keyboard)
            
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é.")
            bot.register_next_step_handler(message, now_weather)
    except (IndexError, KeyError, requests.exceptions.RequestException) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é.")
        bot.register_next_step_handler(message, now_weather)

def now_weather_by_coords(message, city_name):
  parameters = {'key': api_key, 'q': city_name, 'lang': 'ru'}
  try:
      # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
      response = requests.get(f'{weather_url}/current.json', params=parameters).json()
      astronomy_parameters = {'key': api_key, 'q': city_name, 'lang': 'ru'}
      astronomy_response = requests.get(f'{weather_url}/astronomy.json',               params=astronomy_parameters).json()

      # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      data = response
      astronomy_data = astronomy_response

      location = data['location']['name'] + ', ' + data['location']['country']
      local_time = datetime.strptime(data['location']['localtime'], '%Y-%m-%d %H:%M').strftime('%d %B %Y %H:%M')
      update_current = datetime.strptime(data['current']['last_updated'], '%Y-%m-%d %H:%M').strftime('%d %B %Y %H:%M')
      months = {
          'January': '–Ø–Ω–≤–∞—Ä—è',
          'February': '–§–µ–≤—Ä–∞–ª—è',
          'March': '–ú–∞—Ä—Ç–∞',
          'April': '–ê–ø—Ä–µ–ª—è',
          'May': '–ú–∞—è',
          'June': '–ò—é–Ω—è',
          'July': '–ò—é–ª—è',
          'August': '–ê–≤–≥—É—Å—Ç–∞',
          'September': '–°–µ–Ω—Ç—è–±—Ä—è',
          'October': '–û–∫—Ç—è–±—Ä—è',
          'November': '–ù–æ—è–±—Ä—è',
          'December': '–î–µ–∫–∞–±—Ä—è'
      }
      local_time = ' '.join([months.get(month, month) for month in local_time.split()])
      update_current = ' '.join([months.get(month, month) for month in update_current.split()])

      condition_code = str(data['current']['condition']['code'])
      condition = data['current']['condition']['text']
      temp_c = data['current']['temp_c']
      feelslike_c = data['current']['feelslike_c']
      wind = data['current']['wind_kph']
      wind_dir = data['current']['wind_dir']
      humidity = data['current']['humidity']
      clouds = data['current']['cloud']
      pressure = int(data['current']['pressure_mb'])
      uv_index = int(data['current']['uv'])
      vis_km = data['current']['vis_km']
      sunrise = astronomy_data['astronomy']['astro']['sunrise'].replace('AM', '–£—Ç—Ä–∞')
      sunset = astronomy_data['astronomy']['astro']['sunset'].replace('PM', '–í–µ—á–µ—Ä–∞')
      weather_icons = {
            '1000': '‚òÄÔ∏è',  # Sunny / Clear
            '1003': 'üå§Ô∏è',  # Partly cloudy
            '1006': '‚òÅÔ∏è',  # Cloudy
            '1009': '‚òÅÔ∏è',  # Overcast
            '1030': 'üå´Ô∏è',  # Mist
            '1063': 'üå¶Ô∏è',  # Patchy rain possible
            '1066': '‚ùÑÔ∏è',  # Patchy snow possible
            '1069': 'üå®Ô∏è',  # Patchy sleet possible
            '1072': '‚òî',  # Patchy freezing drizzle possible
            '1087': 'üå©Ô∏è',  # Thundery outbreaks possible
            '1114': '‚ùÑÔ∏èüå¨Ô∏è',  # Blowing snow
            '1117': '‚ùÑÔ∏èüå¨Ô∏è',  # Blizzard
            '1135': 'üå´Ô∏è',  # Fog
            '1147': 'üå´Ô∏èü•∂',  # Freezing fog
            '1150': 'üåßÔ∏è',  # Patchy light drizzle
            '1153': 'üåßÔ∏è',  # Light drizzle
            '1168': 'üåßÔ∏è',  # Freezing drizzle
            '1171': 'üåßÔ∏è',  # Heavy freezing drizzle
            '1180': 'üåßÔ∏è',  # Patchy light rain
            '1183': 'üåßÔ∏è',  # Light rain
            '1186': 'üåßÔ∏è',  # Moderate rain at times
            '1189': 'üåßÔ∏è',  # Moderate rain
            '1192': 'üåßÔ∏è',  # Heavy rain at times
            '1195': 'üåßÔ∏è',  # Heavy rain
            '1198': 'üåßÔ∏è‚ùÑÔ∏è',  # Light freezing rain
            '1201': 'üåßÔ∏è‚ùÑÔ∏è',  # Moderate or heavy freezing rain
            '1204': 'üå®Ô∏è',  # Light sleet
            '1207': 'üå®Ô∏è',  # Moderate or heavy sleet
            '1210': '‚ùÑÔ∏è',  # Patchy light snow
            '1213': '‚ùÑÔ∏è',  # Light snow
            '1216': '‚ùÑÔ∏è',  # Patchy moderate snow
            '1219': '‚ùÑÔ∏è',  # Moderate snow
            '1222': '‚ùÑÔ∏è',  # Patchy heavy snow
            '1225': '‚ùÑÔ∏è',  # Heavy snow
            '1237': 'üå®Ô∏è',  # Ice pellets
            '1240': 'üåßÔ∏è',  # Light rain shower
            '1243': 'üåßÔ∏è',  # Moderate or heavy rain shower
            '1246': 'üåßÔ∏è',  # Torrential rain shower
            '1249': 'üå®Ô∏è',  # Light sleet showers
            '1252': 'üå®Ô∏è',  # Moderate or heavy sleet showers
            '1255': '‚ùÑÔ∏è',  # Light snow showers
            '1258': '‚ùÑÔ∏è',  # Moderate or heavy snow showers
            '1261': 'üå®Ô∏è',  # Light showers of ice pellets
            '1264': 'üå®Ô∏è',  # Moderate or heavy showers of ice pellets
            '1273': '‚õàÔ∏è',  # Patchy light rain with thunder
            '1276': '‚õàÔ∏è',  # Moderate or heavy rain with thunder
            '1279': '‚õàÔ∏è‚ùÑÔ∏è',  # Patchy light snow with thunder
            '1282': '‚õàÔ∏è‚ùÑÔ∏è',  # Moderate or heavy snow with thunder
        }
      emoji = weather_icons.get(condition_code, '‚úñÔ∏è')
      wind_mps = convert_to_mps(wind)
      wind_dir_text = get_wind_direction(wind_dir)

      clothing_recommendations = ''

      # Temperature-based recommendations
      if temp_c < -10:
          clothing_recommendations += '‚ùÑÔ∏è –°–∏–ª—å–Ω—ã–π –º–æ—Ä–æ–∑: –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ—Ä–º–æ–±–µ–ª—å–µ, —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ —à—Ç–∞–Ω—ã, –ø—É—Ö–æ–≤–∏–∫ –∏–ª–∏ —à—É–±—É, —à–∞–ø–∫—É-—É—à–∞–Ω–∫—É, —à–∞—Ä—Ñ, —Ç–µ–ø–ª—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏ –∏ –∑–∏–º–Ω—é—é –æ–±—É–≤—å —Å –º–µ—Ö–æ–º.\n'
      elif -10 <= temp_c < 0:
          clothing_recommendations += '‚ùÑÔ∏è –ú–æ—Ä–æ–∑: –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª–æ–µ –ø–∞–ª—å—Ç–æ –∏–ª–∏ –ø—É—Ö–æ–≤–∏–∫, —à–∞–ø–∫—É, —à–∞—Ä—Ñ, –ø–µ—Ä—á–∞—Ç–∫–∏ –∏ —É—Ç–µ–ø–ª–µ–Ω–Ω—É—é –æ–±—É–≤—å.\n'
      elif 0 <= temp_c < 10:
          clothing_recommendations += 'üß• –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ: –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª—É—é –∫—É—Ä—Ç–∫—É, —Å–≤–∏—Ç–µ—Ä, –¥–∂–∏–Ω—Å—ã –∏–ª–∏ —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±—Ä—é–∫–∏, –ª–µ–≥–∫—É—é —à–∞–ø–∫—É –∏–ª–∏ –∫–∞–ø—é—à–æ–Ω.\n'
      elif 10 <= temp_c < 15:
          clothing_recommendations += 'üß• –õ–µ–≥–∫–∞—è –ø—Ä–æ—Ö–ª–∞–¥–∞: –ù–∞–¥–µ–Ω—å—Ç–µ –≤–µ—Ç—Ä–æ–≤–∫—É, –¥–∂–∏–Ω—Å–æ–≤–∫—É –∏–ª–∏ —Ç–æ–ª—Å—Ç–æ–≤–∫—É, –±—Ä—é–∫–∏ –∏–ª–∏ –¥–∂–∏–Ω—Å—ã.\n'
      elif 15 <= temp_c < 20:
          clothing_recommendations += 'üëï –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ: –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –∫—É—Ä—Ç–∫—É –∏–ª–∏ –∫–∞—Ä–¥–∏–≥–∞–Ω, —Ñ—É—Ç–±–æ–ª–∫—É –∏–ª–∏ —Ä—É–±–∞—à–∫—É, –¥–∂–∏–Ω—Å—ã –∏–ª–∏ –±—Ä—é–∫–∏.\n'
      elif 20 <= temp_c < 25:
          clothing_recommendations += 'üëï –¢–µ–ø–ª–æ: –ù–∞–¥–µ–Ω—å—Ç–µ —Ñ—É—Ç–±–æ–ª–∫—É, —à–æ—Ä—Ç—ã –∏–ª–∏ –ª–µ–≥–∫–∏–µ –±—Ä—é–∫–∏, –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –ª–µ–≥–∫—É—é –∫–æ—Ñ—Ç—É –Ω–∞ —Å–ª—É—á–∞–π –≤–µ—Ç—Ä–∞.\n'
      else:
          clothing_recommendations += 'üî• –ñ–∞—Ä–∫–æ: –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –æ–¥–µ–∂–¥—É –∏–∑ –¥—ã—à–∞—â–∏—Ö —Ç–∫–∞–Ω–µ–π, —à–æ—Ä—Ç—ã, –º–∞–π–∫—É –∏–ª–∏ —Å–∞—Ä–∞—Ñ–∞–Ω. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –∏ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏.\n'

      # Wind-based recommendations
      if wind >= 40:
        clothing_recommendations += 'üå¨Ô∏è –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞–¥–µ—Ç—å –≤–µ—Ç—Ä–æ–≤–∫—É, –ø–ª–æ—Ç–Ω—É—é –∫—É—Ä—Ç–∫—É –∏ –ø–ª–æ—Ç–Ω—ã–µ –±—Ä—é–∫–∏.\n'
      elif wind >= 20:
        clothing_recommendations += 'üí® –£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä: –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –±–ª—É–∑–∫—É, —Ä—É–±–∞—à–∫—É –∏–ª–∏ —Ñ—É—Ç–±–æ–ª–∫—É –∏ –±—Ä—é–∫–∏.\n'

      # Humidity-based recommendations
      if humidity >= 90:
          clothing_recommendations += 'üåßÔ∏è –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: –ù–∞–¥–µ–Ω—å—Ç–µ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—É—é –∫—É—Ä—Ç–∫—É, –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º—ã–µ —à—Ç–∞–Ω—ã –∏ —Ä–µ–∑–∏–Ω–æ–≤—ã–µ —Å–∞–ø–æ–≥–∏. –í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç.\n'
      elif humidity >= 80:
          clothing_recommendations += 'üåßÔ∏è –í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: –ù–∞–¥–µ–Ω—å—Ç–µ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—É—é –∫—É—Ä—Ç–∫—É –∏ –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º—É—é –æ–±—É–≤—å.\n'
      elif humidity >= 60:
          clothing_recommendations += 'üí¶ –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: –ù–∞–¥–µ–Ω—å—Ç–µ –¥—ã—à–∞—â—É—é –æ–¥–µ–∂–¥—É –∏ –æ–±—É–≤—å, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–æ–º–æ–∫–∞–µ—Ç.\n'

      # Pressure-based recommendations
      if pressure <= 970:
          clothing_recommendations += 'üå™Ô∏è –û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: –ù–∞–¥–µ–Ω—å—Ç–µ –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º—É—é –æ–¥–µ–∂–¥—É, –≤–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–π –æ–¥–µ–∂–¥—ã –Ω–∞ —Å–ª—É—á–∞–π —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã.\n'
      elif pressure <= 990:
          clothing_recommendations += 'üå´Ô∏è –ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: –í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –ª–µ–≥–∫—É—é –∫—É—Ä—Ç–∫—É –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä, —á—Ç–æ–±—ã —É—Ç–µ–ø–ª–∏—Ç—å—Å—è –≤ —Å–ª—É—á–∞–µ –ø–æ—Ö–æ–ª–æ–¥–∞–Ω–∏—è.\n'
      elif pressure >= 1030:
          clothing_recommendations += '‚òÄÔ∏è –í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –æ–¥–µ–∂–¥—É, —Ç–∞–∫ –∫–∞–∫ –ø–æ–≥–æ–¥–∞, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –±—É–¥–µ—Ç —è—Å–Ω–æ–π –∏ —Ç–µ–ø–ª–æ–π.\n'


      button_support1 = types.InlineKeyboardButton('üéÅ–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (DonationAlerts)', url='https://www.donationalerts.com/r/pogodaradar')
      button_support2 = types.InlineKeyboardButton('üí∂–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (CloudTips)', url='https://pay.cloudtips.ru/p/317d7868')
      button_support3 = types.InlineKeyboardButton('üí≥–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (YooMoney)', url='https://yoomoney.ru/to/410018154591956')
      markup = types.InlineKeyboardMarkup().add(button_support1, button_support2, button_support3)
      markup = types.InlineKeyboardMarkup()
      markup.row(button_support1)
      markup.row(button_support2)
      markup.row(button_support3)

      bot.send_message(message.from_user.id, f'üèôÔ∏è–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {location}\nüóìÔ∏è–í—Ä–µ–º—è –∏ –¥–∞—Ç–∞: {local_time}\n\nüîÑ–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {update_current}\n\n{emoji} {condition}\n\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_c}¬∞C\nü§ó–ü–æ –æ—â—É—â–µ–Ω–∏—è–º: {feelslike_c}¬∞C\nüí®–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_mps:.1f} –º/—Å\nüëâüèª–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {wind_dir_text}\nüíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n‚òÅÔ∏è–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds} %\nüïó–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\nüï∂Ô∏è–í–∏–¥–∏–º–æ—Å—Ç—å: {vis_km} –∫–º\n\nüòéUV –∏–Ω–¥–µ–∫—Å: {uv_index}\n\nüåÖ–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise}\nüåá–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset}\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ: \n{clothing_recommendations}', reply_markup=markup)
  except KeyError:
      bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.')

@bot.message_handler(commands=['help'])
def get_help(message):
  bot.send_message(message.from_user.id, 
    '(–¢–µ—Ö–ø–æ–º–æ—â—å)\n'
    '1) ‚öôÔ∏è–ö–æ–º–∞–Ω–¥–∞ /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n'
    '2) üö®–ö–æ–º–∞–Ω–¥–∞ /help - –°–ø—Ä–∞–≤–∫–∞ –æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º\n'
    '3) üõ†Ô∏è–ö–æ–º–∞–Ω–¥–∞ /support - –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–æ—Ç–∞\n\n'
    
    '(–ü–æ–≥–æ–¥–∞)\n'
    '4) ‚úèÔ∏è–ö–æ–º–∞–Ω–¥–∞ /setcity - –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥\n'
    '5) ‚õÖ–ö–æ–º–∞–Ω–¥–∞ /nowweather - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ\n'
    '6) üìÜ–ö–æ–º–∞–Ω–¥–∞ /forecastweather - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è –≤ –≥–æ—Ä–æ–¥–µ\n'
    '7) ‚úàÔ∏è–ö–æ–º–∞–Ω–¥–∞ /weatherairports - –ü–æ–≥–æ–¥–∞ –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö –º–∏—Ä–∞\n'
    '8) üó∫Ô∏è–ö–æ–º–∞–Ω–¥–∞ /radarmap - –†–∞–¥–∞—Ä –æ—Å–∞–¥–∫–æ–≤\n'
    '9) ‚ö†Ô∏è–ö–æ–º–∞–Ω–¥–∞ /alerts - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–∞—Ö –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É\n'
    '10) üå´Ô∏è–ö–æ–º–∞–Ω–¥–∞ /aqi - –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ\n'
    '11) ‚òî–ö–æ–º–∞–Ω–¥–∞ /precipitationmap - –ö–∞—Ä—Ç–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –æ—Å–∞–¥–∫–æ–≤\n'
    '12) üå°Ô∏è–ö–æ–º–∞–Ω–¥–∞ /anomaltempmap - –ö–∞—Ä—Ç–∞ –∞–Ω–æ–º–∞–ª–∏–∏ —Å—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞ 5 —Å—É—Ç–æ–∫\n'
    '13) üå°Ô∏è–ö–æ–º–∞–Ω–¥–∞ /tempwatermap - –ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã –≤ –ß–µ—Ä–Ω–æ–º –º–æ—Ä–µ\n'
    '14) üìà–ö–æ–º–∞–Ω–¥–∞ /verticaltemplayer - –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –Ω–∏–∂–Ω–µ–º 1-–∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤–æ–º —Å–ª–æ–µ\n'
    '15) üìä–ö–æ–º–∞–Ω–¥–∞ /meteograms - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç–µ–æ–≥—Ä–∞–º–º –ø–æ –≥–æ—Ä–æ–¥–∞–º –†–æ—Å—Å–∏–∏ –∏ –ë–µ–ª–∞—Ä—É—Å–∏\n'
    '16) üåê–ö–æ–º–∞–Ω–¥–∞ /weatherwebsites - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–∞–π—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ\n'
    '17) üî•–ö–æ–º–∞–Ω–¥–∞ /firehazard_map - –ö–∞—Ä—Ç–∞ –ø–æ–∂–∞—Ä–æ–æ–ø–∞c–Ω–æ—Å—Ç–∏ –ø–æ –†–§\n'
    '18) ‚ùó–ö–æ–º–∞–Ω–¥–∞ /extrainfo - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ö—É–¥—à–µ–Ω–∏–∏ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π\n'
    '19) üö©–ö–æ–º–∞–Ω–¥–∞ /stations - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ —Å –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏–π –†–§ (–±–µ—Ç–∞-–≤–µ—Ä—Å–∏—è)\n'
    '20) üåç–ö–æ–º–∞–Ω–¥–∞ /get_meteoweb - –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–≥–æ–¥—ã Meteoweb\n\n'
    
    '(–î–æ–ø.–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)\n'
    '21) üì¢–ö–æ–º–∞–Ω–¥–∞ /share - –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º\n'
    '22) üéÅ–ö–æ–º–∞–Ω–¥–∞ /donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\n\n'

    '(–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è)\n'
    '23) üéÆ–ö–æ–º–∞–Ω–¥–∞ /guess_temp - –£–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É'
)
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º

@bot.message_handler(commands=['share'])
def get_share(message):
  markup = types.InlineKeyboardMarkup()
  button_1 = (types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º', url = 'https://t.me/share/url?url=https://t.me/pogodaradar_bot'))
  markup.add(button_1)
  bot.send_message(message.from_user.id, text='<a href="https://t.me/share/url?url=https://t.me/pogodaradar_bot">PogodaRadar –≤ Telegram</a>', parse_mode=ParseMode.HTML, reply_markup=markup)
  markup.add(button_1)

@bot.message_handler(commands=['donate'])
def get_donate(message):
  bot.send_message(
    message.from_user.id,
    (
        '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å PogodaRadar –ø–æ —Å—Å—ã–ª–∫–∞–º:\n'
        '1) üéÅDonationAlerts: https://donationalerts.com/r/pogodaradar\n'
        '2) üí∂CloudTips: https://pay.cloudtips.ru/p/317d7868\n'
        '3) üí≥YooMoney: https://yoomoney.ru/to/410018154591956'
    ),
    disable_web_page_preview=True
)
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

@bot.message_handler(commands=['radarmap'])
def get_radar_map(message):
  url = 'https://meteoinfo.ru/hmc-output/rmap/phenomena.gif'
  response = requests.get(url)

  if response.status_code == 200:
   with open('phenomena.gif', 'wb') as f:
    f.write(response.content)

    with open('phenomena.gif', 'rb') as f:
        bot.send_animation(message.from_user.id, f)

    os.remove('phenomena.gif')
  else:
   bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–¥–∞—Ä –ø–æ–≥–æ–¥—ã

@bot.message_handler(commands=['precipitationmap'])
def get_precipitation_map(message):
  url = 'https://meteoinfo.ru/hmc-input/mapsynop/Precip.png'
  response = requests.get(url)

  if response.status_code == 200:
   with open('Precip.png', 'wb') as f:
    f.write(response.content)

    with open('Precip.png', 'rb') as f:
        bot.send_photo(message.from_user.id, f, caption='–ö–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å—É—Ç–∫–∏')

    os.remove('Precip.png')
  else:
   bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –æ—Å–∞–¥–∫–æ–≤

@bot.message_handler(commands=['tempwatermap'])
def get_tempwater_map(message):
  url = "https://meteoinfo.ru/res/230/web/esimo/black/sst/black.png"
  response = requests.get(url)

  if response.status_code == 200:
   with open('black.png', 'wb') as f:
    f.write(response.content)

    with open('black.png', 'rb') as f:
        bot.send_animation(message.from_user.id, f)

    os.remove('black.png')
  else:
   bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –≤ —á–µ—Ä–Ω–æ–º –º–æ—Ä–µ

@bot.message_handler(commands=['verticaltemplayer'])
def get_vertical_temp(message):
  url = "https://meteoinfo.ru/hmc-input/profiler/cao/image1.jpg"
  response = requests.get(url)

  if response.status_code == 200:
   with open('image1.png', 'wb') as f:
    f.write(response.content)

    with open('image1.png', 'rb') as f:
        bot.send_photo(message.from_user.id, f, "–ò–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –ù–ü–û –ê–¢–¢–ï–•. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–æ—Ñ–∏–ª–µ–º–µ—Ä–∞: –§–ì–ë–£ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∞—ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª., –≥. –î–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π, —É–ª. –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∞—è, 3 (55¬∞55¬¥32¬¥¬¥N, 37¬∞31¬¥23¬¥¬¥E)")

    os.remove('image1.png')
  else:
   bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –≤ 1-–∫–º —Å–ª–æ–µ

@bot.message_handler(commands=['anomaltempmap'])
def get_anomal_temp_map(message):
  url = 'https://meteoinfo.ru/images/vasiliev/anom2_6/anom2_6.gif'
  response = requests.get(url)

  if response.status_code == 200:
      with open('anom2_6.gif', 'wb') as f:
          f.write(response.content)

      with open('anom2_6.gif', 'rb') as f:
          bot.send_photo(message.from_user.id, photo=f)

      os.remove('anom2_6.gif')
  else:
      bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É –∞–Ω–æ–º–∞–ª–∏–∏ —Å—Ä–µ–¥.—Å—É—Ç–æ—á–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã

@bot.message_handler(commands=['nowweather'])

def convert_to_mps(kph):
  mps = kph * 1000 / 3600
  return mps

def get_wind_direction(deg):
  directions = {
      "N": "–°–µ–≤–µ—Ä–Ω—ã–π",
      "NNE": "–°–µ–≤–µ—Ä–æ-—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
      "NE": "–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
      "ENE": "–í–æ—Å—Ç–æ—á–Ω–æ-—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
      "E": "–í–æ—Å—Ç–æ—á–Ω—ã–π",
      "ESE": "–í–æ—Å—Ç–æ—á–Ω–æ-—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
      "SE": "–Æ–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
      "SSE": "–Æ–≥–æ-—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
      "S": "–Æ–∂–Ω—ã–π",
      "SSW": "–Æ–≥–æ-—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
      "SW": "–Æ–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
      "WSW": "–ó–∞–ø–∞–¥–Ω–æ-—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
      "W": "–ó–∞–ø–∞–¥–Ω—ã–π",
      "WNW": "–ó–∞–ø–∞–¥–Ω–æ-—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
      "NW": "–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
      "NNW": "–°–µ–≤–µ—Ä–æ-—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
  }

  return directions.get(deg, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')


def now_weather(message):
  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ CSV
  city = load_city(message.from_user.id)
  if city is None:
        bot.send_message(message.from_user.id, '–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcity, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥.')
        return
    
  parameters = {'key': api_key, 'q': city, 'lang': 'ru'}
  r = requests.get(f'{weather_url}/current.json', params=parameters)

  data = r.json()

  astronomy_parameters = {'key': api_key, 'q': city, 'lang': 'ru'}
  astronomy_r = requests.get(f'{weather_url}/astronomy.json', params=astronomy_parameters)

  astronomy_data = astronomy_r.json()

  try:
    location = data['location']['name'] + ', ' + data['location']['country']
    local_time = datetime.strptime(data['location']['localtime'], '%Y-%m-%d %H:%M').strftime('%d %B %Y %H:%M')
    update_current = datetime.strptime(data['current']['last_updated'], '%Y-%m-%d %H:%M').strftime('%d %B %Y %H:%M')
    months = {
      'January': '–Ø–Ω–≤–∞—Ä—è',
      'February': '–§–µ–≤—Ä–∞–ª—è',
      'March': '–ú–∞—Ä—Ç–∞',
      'April': '–ê–ø—Ä–µ–ª—è',
      'May': '–ú–∞—è',
      'June': '–ò—é–Ω—è',
      'July': '–ò—é–ª—è',
      'August': '–ê–≤–≥—É—Å—Ç–∞',
      'September': '–°–µ–Ω—Ç—è–±—Ä—è',
      'October': '–û–∫—Ç—è–±—Ä—è',
      'November': '–ù–æ—è–±—Ä—è',
      'December': '–î–µ–∫–∞–±—Ä—è'
    }
    local_time = ' '.join([months.get(month, month) for month in local_time.split()])
    update_current = ' '.join([months.get(month, month) for month in update_current.split()])

    
    condition_code = str(data['current']['condition']['code'])
    condition = data['current']['condition']['text']
    temp_c = data['current']['temp_c']
    feelslike_c = data['current']['feelslike_c']
    wind = data['current']['wind_kph']
    wind_dir = data['current']['wind_dir']
    humidity = data['current']['humidity']
    clouds = data['current']['cloud']
    pressure = int(data['current']['pressure_mb'])
    uv_index = int(data['current']['uv'])
    vis_km = data['current']['vis_km']
    sunrise = astronomy_data['astronomy']['astro']['sunrise'].replace('AM', '–£—Ç—Ä–∞')
    sunset = astronomy_data['astronomy']['astro']['sunset'].replace('PM', '–í–µ—á–µ—Ä–∞')
    weather_icons = {
        '1000': '‚òÄÔ∏è',  # Sunny / Clear
        '1003': 'üå§Ô∏è',  # Partly cloudy
        '1006': '‚òÅÔ∏è',  # Cloudy
        '1009': '‚òÅÔ∏è',  # Overcast
        '1030': 'üå´Ô∏è',  # Mist
        '1063': 'üå¶Ô∏è',  # Patchy rain possible
        '1066': '‚ùÑÔ∏è',  # Patchy snow possible
        '1069': 'üå®Ô∏è',  # Patchy sleet possible
        '1072': '‚òî',  # Patchy freezing drizzle possible
        '1087': 'üå©Ô∏è',  # Thundery outbreaks possible
        '1114': '‚ùÑÔ∏èüå¨Ô∏è',  # Blowing snow
        '1117': '‚ùÑÔ∏èüå¨Ô∏è',  # Blizzard
        '1135': 'üå´Ô∏è',  # Fog
        '1147': 'üå´Ô∏èü•∂',  # Freezing fog
        '1150': 'üåßÔ∏è',  # Patchy light drizzle
        '1153': 'üåßÔ∏è',  # Light drizzle
        '1168': 'üåßÔ∏è',  # Freezing drizzle
        '1171': 'üåßÔ∏è',  # Heavy freezing drizzle
        '1180': 'üåßÔ∏è',  # Patchy light rain
        '1183': 'üåßÔ∏è',  # Light rain
        '1186': 'üåßÔ∏è',  # Moderate rain at times
        '1189': 'üåßÔ∏è',  # Moderate rain
        '1192': 'üåßÔ∏è',  # Heavy rain at times
        '1195': 'üåßÔ∏è',  # Heavy rain
        '1198': 'üåßÔ∏è‚ùÑÔ∏è',  # Light freezing rain
        '1201': 'üåßÔ∏è‚ùÑÔ∏è',  # Moderate or heavy freezing rain
        '1204': 'üå®Ô∏è',  # Light sleet
        '1207': 'üå®Ô∏è',  # Moderate or heavy sleet
        '1210': '‚ùÑÔ∏è',  # Patchy light snow
        '1213': '‚ùÑÔ∏è',  # Light snow
        '1216': '‚ùÑÔ∏è',  # Patchy moderate snow
        '1219': '‚ùÑÔ∏è',  # Moderate snow
        '1222': '‚ùÑÔ∏è',  # Patchy heavy snow
        '1225': '‚ùÑÔ∏è',  # Heavy snow
        '1237': 'üå®Ô∏è',  # Ice pellets
        '1240': 'üåßÔ∏è',  # Light rain shower
        '1243': 'üåßÔ∏è',  # Moderate or heavy rain shower
        '1246': 'üåßÔ∏è',  # Torrential rain shower
        '1249': 'üå®Ô∏è',  # Light sleet showers
        '1252': 'üå®Ô∏è',  # Moderate or heavy sleet showers
        '1255': '‚ùÑÔ∏è',  # Light snow showers
        '1258': '‚ùÑÔ∏è',  # Moderate or heavy snow showers
        '1261': 'üå®Ô∏è',  # Light showers of ice pellets
        '1264': 'üå®Ô∏è',  # Moderate or heavy showers of ice pellets
        '1273': '‚õàÔ∏è',  # Patchy light rain with thunder
        '1276': '‚õàÔ∏è',  # Moderate or heavy rain with thunder
        '1279': '‚õàÔ∏è‚ùÑÔ∏è',  # Patchy light snow with thunder
        '1282': '‚õàÔ∏è‚ùÑÔ∏è',  # Moderate or heavy snow with thunder
    }
    emoji = weather_icons.get(condition_code, '‚úñÔ∏è')
    wind_mps = convert_to_mps(wind)
    wind_dir_text = get_wind_direction(wind_dir)

    clothing_recommendations = ''

    # Temperature-based recommendations
    if temp_c < -10:
          clothing_recommendations += '‚ùÑÔ∏è –°–∏–ª—å–Ω—ã–π –º–æ—Ä–æ–∑: –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ—Ä–º–æ–±–µ–ª—å–µ, —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ —à—Ç–∞–Ω—ã, –ø—É—Ö–æ–≤–∏–∫ –∏–ª–∏ —à—É–±—É, —à–∞–ø–∫—É-—É—à–∞–Ω–∫—É, —à–∞—Ä—Ñ, —Ç–µ–ø–ª—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏ –∏ –∑–∏–º–Ω—é—é –æ–±—É–≤—å —Å –º–µ—Ö–æ–º.\n'
    elif -10 <= temp_c < 0:
          clothing_recommendations += '‚ùÑÔ∏è –ú–æ—Ä–æ–∑: –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª–æ–µ –ø–∞–ª—å—Ç–æ –∏–ª–∏ –ø—É—Ö–æ–≤–∏–∫, —à–∞–ø–∫—É, —à–∞—Ä—Ñ, –ø–µ—Ä—á–∞—Ç–∫–∏ –∏ —É—Ç–µ–ø–ª–µ–Ω–Ω—É—é –æ–±—É–≤—å.\n'
    elif 0 <= temp_c < 10:
          clothing_recommendations += 'üß• –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ: –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª—É—é –∫—É—Ä—Ç–∫—É, —Å–≤–∏—Ç–µ—Ä, –¥–∂–∏–Ω—Å—ã –∏–ª–∏ —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±—Ä—é–∫–∏, –ª–µ–≥–∫—É—é —à–∞–ø–∫—É –∏–ª–∏ –∫–∞–ø—é—à–æ–Ω.\n'
    elif 10 <= temp_c < 15:
          clothing_recommendations += 'üß• –õ–µ–≥–∫–∞—è –ø—Ä–æ—Ö–ª–∞–¥–∞: –ù–∞–¥–µ–Ω—å—Ç–µ –≤–µ—Ç—Ä–æ–≤–∫—É, –¥–∂–∏–Ω—Å–æ–≤–∫—É –∏–ª–∏ —Ç–æ–ª—Å—Ç–æ–≤–∫—É, –±—Ä—é–∫–∏ –∏–ª–∏ –¥–∂–∏–Ω—Å—ã.\n'
    elif 15 <= temp_c < 20:
          clothing_recommendations += 'üëï –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ: –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –∫—É—Ä—Ç–∫—É –∏–ª–∏ –∫–∞—Ä–¥–∏–≥–∞–Ω, —Ñ—É—Ç–±–æ–ª–∫—É –∏–ª–∏ —Ä—É–±–∞—à–∫—É, –¥–∂–∏–Ω—Å—ã –∏–ª–∏ –±—Ä—é–∫–∏.\n'
    elif 20 <= temp_c < 25:
          clothing_recommendations += 'üëï –¢–µ–ø–ª–æ: –ù–∞–¥–µ–Ω—å—Ç–µ —Ñ—É—Ç–±–æ–ª–∫—É, —à–æ—Ä—Ç—ã –∏–ª–∏ –ª–µ–≥–∫–∏–µ –±—Ä—é–∫–∏, –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –ª–µ–≥–∫—É—é –∫–æ—Ñ—Ç—É –Ω–∞ —Å–ª—É—á–∞–π –≤–µ—Ç—Ä–∞.\n'
    else:
          clothing_recommendations += 'üî• –ñ–∞—Ä–∫–æ: –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –æ–¥–µ–∂–¥—É –∏–∑ –¥—ã—à–∞—â–∏—Ö —Ç–∫–∞–Ω–µ–π, —à–æ—Ä—Ç—ã, –º–∞–π–∫—É –∏–ª–∏ —Å–∞—Ä–∞—Ñ–∞–Ω. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –∏ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏.\n'

      # Wind-based recommendations
    if wind >= 40:
        clothing_recommendations += 'üå¨Ô∏è –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞–¥–µ—Ç—å –≤–µ—Ç—Ä–æ–≤–∫—É, –ø–ª–æ—Ç–Ω—É—é –∫—É—Ä—Ç–∫—É –∏ –ø–ª–æ—Ç–Ω—ã–µ –±—Ä—é–∫–∏.\n'
    elif wind >= 20:
        clothing_recommendations += 'üí® –£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä: –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –±–ª—É–∑–∫—É, —Ä—É–±–∞—à–∫—É –∏–ª–∏ —Ñ—É—Ç–±–æ–ª–∫—É –∏ –±—Ä—é–∫–∏.\n'

      # Humidity-based recommendations
    if humidity >= 90:
          clothing_recommendations += 'üåßÔ∏è –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: –ù–∞–¥–µ–Ω—å—Ç–µ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—É—é –∫—É—Ä—Ç–∫—É, –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º—ã–µ —à—Ç–∞–Ω—ã –∏ —Ä–µ–∑–∏–Ω–æ–≤—ã–µ —Å–∞–ø–æ–≥–∏. –í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç.\n'
    elif humidity >= 80:
          clothing_recommendations += 'üåßÔ∏è –í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: –ù–∞–¥–µ–Ω—å—Ç–µ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—É—é –∫—É—Ä—Ç–∫—É –∏ –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º—É—é –æ–±—É–≤—å.\n'
    elif humidity >= 60:
          clothing_recommendations += 'üí¶ –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: –ù–∞–¥–µ–Ω—å—Ç–µ –¥—ã—à–∞—â—É—é –æ–¥–µ–∂–¥—É –∏ –æ–±—É–≤—å, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–æ–º–æ–∫–∞–µ—Ç.\n'

      # Pressure-based recommendations
    if pressure <= 970:
          clothing_recommendations += 'üå™Ô∏è –û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: –ù–∞–¥–µ–Ω—å—Ç–µ –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º—É—é –æ–¥–µ–∂–¥—É, –≤–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–π –æ–¥–µ–∂–¥—ã –Ω–∞ —Å–ª—É—á–∞–π —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã.\n'
    elif pressure <= 990:
          clothing_recommendations += 'üå´Ô∏è –ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: –í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –ª–µ–≥–∫—É—é –∫—É—Ä—Ç–∫—É –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä, —á—Ç–æ–±—ã —É—Ç–µ–ø–ª–∏—Ç—å—Å—è –≤ —Å–ª—É—á–∞–µ –ø–æ—Ö–æ–ª–æ–¥–∞–Ω–∏—è.\n'
    elif pressure >= 1030:
          clothing_recommendations += '‚òÄÔ∏è –í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –æ–¥–µ–∂–¥—É, —Ç–∞–∫ –∫–∞–∫ –ø–æ–≥–æ–¥–∞, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –±—É–¥–µ—Ç —è—Å–Ω–æ–π –∏ —Ç–µ–ø–ª–æ–π.\n'

    
    button_support1 = types.InlineKeyboardButton('üéÅ–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (DonationAlerts)', url='https://www.donationalerts.com/r/pogodaradar')
    button_support2 = types.InlineKeyboardButton('üí∂–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (CloudTips)', url='https://pay.cloudtips.ru/p/317d7868')
    button_support3 = types.InlineKeyboardButton('üí≥–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (YooMoney)', url='https://yoomoney.ru/to/410018154591956')
    markup = types.InlineKeyboardMarkup().add(button_support1, button_support2, button_support3)
    markup = types.InlineKeyboardMarkup()
    markup.row(button_support1)
    markup.row(button_support2)
    markup.row(button_support3)

    bot.send_message(message.from_user.id, f'üèôÔ∏è–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {location}\nüóìÔ∏è–í—Ä–µ–º—è –∏ –¥–∞—Ç–∞: {local_time}\n\nüîÑ–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {update_current}\n\n{emoji} {condition}\n\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_c}¬∞C\nü§ó–ü–æ –æ—â—É—â–µ–Ω–∏—è–º: {feelslike_c}¬∞C\nüí®–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_mps:.1f} –º/—Å\nüëâüèª–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {wind_dir_text}\nüíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n‚òÅÔ∏è–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds} %\nüïó–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\nüï∂Ô∏è–í–∏–¥–∏–º–æ—Å—Ç—å: {vis_km} –∫–º\n\nüòéUV –∏–Ω–¥–µ–∫—Å: {uv_index}\n\nüåÖ–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise}\nüåá–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset}\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ: \n{clothing_recommendations}', reply_markup=markup)
  except KeyError:
    bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.')
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ

@bot.message_handler(commands=['forecastweather'])
def forecast_weather(message):
  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ CSV
  city = load_city(message.from_user.id)
  if city is None:
        bot.send_message(message.from_user.id, '–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcity, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥.')
        return
    
  parameters = {'key': api_key, 'q': city, 'days': 3, 'lang': 'ru'}
  r = requests.get(f'{weather_url}/forecast.json', params=parameters)

  data = r.json()

  try:
      location = data['location']['name'] + ', ' + data['location']['country']
      forecast_message = f'üèôÔ∏è–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ: {location}\n\n'

      for day in data['forecast']['forecastday']:
          months = {
            'January': '–Ø–Ω–≤–∞—Ä—è',
            'February': '–§–µ–≤—Ä–∞–ª—è',
            'March': '–ú–∞—Ä—Ç–∞',
            'April': '–ê–ø—Ä–µ–ª—è',
            'May': '–ú–∞—è',
            'June': '–ò—é–Ω—è',
            'July': '–ò—é–ª—è',
            'August': '–ê–≤–≥—É—Å—Ç–∞',
            'September': '–°–µ–Ω—Ç—è–±—Ä—è',
            'October': '–û–∫—Ç—è–±—Ä—è',
            'November': '–ù–æ—è–±—Ä—è',
            'December': '–î–µ–∫–∞–±—Ä—è'
          }
          date = day['date']
          date = datetime.strptime(day['date'], '%Y-%m-%d').strftime('%d %B %Y')
          date = ' '.join([months.get(month, month) for month in date.split()])
          condition_code = str(day['day']['condition']['code'])
          conditions = str(day['day']['condition']['text'])
          max_temp = str(day['day']['maxtemp_c'])
          min_temp = str(day['day']['mintemp_c'])
          wind = day['day']['maxwind_kph']
          totalprecip_mm = str(day['day']['totalprecip_mm'])
          weather_icons = {
            '1000': '‚òÄÔ∏è',  # –°–æ–ª–Ω–µ—á–Ω–æ
            '1003': 'üå§Ô∏è',  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å
            '1006': '‚òÅÔ∏è',  # –û–±–ª–∞—á–Ω–æ
            '1009': '‚òÅÔ∏è',  # –ü–∞—Å–º—É—Ä–Ω–æ
            '1030': 'üå´Ô∏è',  # –¢—É–º–∞–Ω
            '1063': 'üå¶Ô∏è',  # –í–æ–∑–º–æ–∂–µ–Ω –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å
            '1066': '‚ùÑÔ∏è',  # –í–æ–∑–º–æ–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥
            '1069': 'üå®Ô∏è',  # –í–æ–∑–º–æ–∂–µ–Ω –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥
            '1072': '‚òî',  # –í–æ–∑–º–æ–∂–µ–Ω –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å
            '1087': 'üå©Ô∏è',  # –í–æ–∑–º–æ–∂–Ω—ã –≥—Ä–æ–∑—ã
            '1114': '‚ùÑÔ∏è',  # –°–Ω–µ–≥
            '1117': '‚ùÑÔ∏èüå¨Ô∏è', # –ú–µ—Ç–µ–ª—å
            '1135': 'üå´Ô∏è', # –¢—É–º–∞–Ω
            '1147': 'üå´Ô∏èü•∂', # –õ–µ–¥—è–Ω–æ–π —Ç—É–º–∞–Ω
            '1150': 'üåßÔ∏è',  # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è —Å –¥–æ–∂–¥–µ–º
            '1153': 'üå¶Ô∏è',  # –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å
            '1168': 'üå¶Ô∏è',  # –ú–µ—Å—Ç–∞–º–∏ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å
            '1171': 'üåßÔ∏è',  # –ü—Ä–æ–π–¥–µ—Ç –¥–æ–∂–¥—å
            '1180': 'üåßÔ∏è',  # –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏
            '1183': 'üåßÔ∏è',  # –ú–µ—Å—Ç–∞–º–∏ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏
            '1186': 'üåßÔ∏è',  # –î–æ–∂–¥—å
            '1189': 'üåßÔ∏è',  # –ú–µ—Å—Ç–∞–º–∏ –¥–æ–∂–¥—å
            '1192': 'üåßÔ∏è',  # –ü—Ä–æ–ª–∏–≤–Ω—ã–µ –¥–æ–∂–¥–∏
            '1195': 'üåßÔ∏è',  # –ü—Ä–æ–ª–∏–≤–Ω–æ–π –¥–æ–∂–¥—å
            '1198': '‚õàÔ∏è',  # –î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π
            '1201': '‚õàÔ∏è',  # –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∏–≤–µ–Ω—å
            '1204': '‚õàÔ∏è',  # –ú–µ—Å—Ç–∞–º–∏ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∏–≤–µ–Ω—å
            '1207': '‚õàÔ∏è',  # –õ–∏–≤–µ–Ω—å
            '1210': '‚õàÔ∏è',  # –ú–µ—Å—Ç–∞–º–∏ –ª–∏–≤–µ–Ω—å
            '1213': '‚õàÔ∏è',  # –ö—Ä–∞—Å–∏–≤–∞—è –≥—Ä–æ–∑–∞
            '1216': '‚õàÔ∏è',  # –ì—Ä–æ–∑–∞
            '1219': '‚õàÔ∏è',  # –ú–µ—Å—Ç–∞–º–∏ –≥—Ä–æ–∑–∞
            '1222': 'üåßÔ∏è',  # –ü—Ä–æ—Ö–ª–∞–¥–Ω—ã–µ –¥–æ–∂–¥–∏
            '1225': 'üåßÔ∏è',  # –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ —Å –¥–æ–∂–¥–µ–º
            '1237': 'üå®Ô∏è',  # –ì—Ä–æ–∑–∞ —Å –º–æ–∫—Ä—ã–º —Å–Ω–µ–≥–æ–º
            '1240': 'üå®Ô∏è',  # –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–Ω–µ–≥
            '1243': 'üå®Ô∏è',  # –ú–µ—Å—Ç–∞–º–∏ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–Ω–µ–≥
            '1246': 'üå®Ô∏è',  # –°–Ω–µ–≥
            '1249': 'üå®Ô∏è',  # –ú–µ—Å—Ç–∞–º–∏ —Å–Ω–µ–≥
            '1252': 'üå®Ô∏è',  # –≠–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–∏–π –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–Ω–µ–≥
            '1255': 'üå®Ô∏è',  # –≠–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–∏–π —Å–Ω–µ–≥
            '1258': 'üå®Ô∏è',  # –°–Ω–µ–≥–æ–ø–∞–¥
            '1261': 'üå®Ô∏è',  # –ú–µ—Å—Ç–∞–º–∏ —Å–Ω–µ–≥–æ–ø–∞–¥
            '1264': 'üå®Ô∏è',  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥
            '1273': 'üåßÔ∏è',  # –î–æ–∂–¥—å —Å –º–æ–∫—Ä—ã–º —Å–Ω–µ–≥–æ–º
            '1276': '‚ùÑÔ∏è',  # –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏ / –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥
            '1279': '‚ùÑÔ∏è',  # –û—Ç–¥–µ–ª—å–Ω—ã–µ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏
            '1282': '‚ùÑÔ∏è',  # –°—ã—Ä–æ
          }
          emoji = weather_icons.get(condition_code, '‚úñÔ∏è')

          wind_mps_forecast = convert_to_mps(wind)

          forecast_message += f'üóìÔ∏è–î–∞—Ç–∞: {date}\n\n‚òî–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {emoji}{conditions}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –î–Ω–µ–º {max_temp}¬∞C –ù–æ—á—å—é {min_temp}¬∞C\nüí®–í–µ—Ç–µ—Ä: {wind_mps_forecast:.1f} –º/—Å\nüí¶–û–±—â–∞—è —Å—É–º–º–∞ –æ—Å–∞–¥–∫–æ–≤ –∑–∞ –¥–µ–Ω—å: {totalprecip_mm} –º–º\n\n'

        
      bot.send_message(message.from_user.id, forecast_message)
  except KeyError:
      bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.')
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ

# –ö–æ–º–∞–Ω–¥–∞ /aqi –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
@bot.message_handler(commands=['aqi'])
def get_city_aqi(message):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ CSV
    city = load_city(message.from_user.id)
    if city is None:
        bot.send_message(message.from_user.id, '–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcity, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥.')
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
    parameters = {'key': api_key, 'q': city, 'aqi': 'yes', 'lang': 'ru'}
    r = requests.get(f'{weather_url}/current.json', params=parameters)

    try:
        data = r.json()
        location = data['location']['name'] + ', ' + data['location']['country']
        us_epa_index = str(data['current']['air_quality']['us-epa-index'])
        co = str(data['current']['air_quality']['co'])
        no2 = str(data['current']['air_quality']['no2'])
        o3 = str(data['current']['air_quality']['o3'])
        so2 = str(data['current']['air_quality']['so2'])
        pm2_5 = str(data['current']['air_quality']['pm2_5'])
        pm10 = str(data['current']['air_quality']['pm10'])

        bot.send_message(
            message.from_user.id,
            f'üèôÔ∏è–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ: {location}\n\n'
            f'üåø–£—Ä–æ–≤–µ–Ω—å –∏–Ω–¥–µ–∫—Å–∞: ( {us_epa_index} )\n\n'
            f'üè≠üî•–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ CO: {co}\n'
            f'üöóüö¢–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ NO2: {no2}\n'
            f'üåá–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ O3: {o3}\n'
            f'üè≠üåã–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ SO2: {so2}\n'
            f'üè≠üöú–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PM2.5: {pm2_5}\n'
            f'üè≠üöú–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PM10: {pm10}'
        )
    except KeyError:
        bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.')
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ

@bot.message_handler(commands=['alerts'])
def alerts_weather(message):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ CSV
    city = load_city(message.from_user.id)
    if city is None:
        bot.send_message(message.from_user.id, '–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcity, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥.')
        return

    parameters = {'key': api_key, 'q': city, 'days': 1, 'alerts': 'yes', 'lang': 'ru'}
    r = requests.get(f'{weather_url}/forecast.json', params=parameters)
    data = r.json()

    try:
        location = data['location']['name'] + ', ' + data['location']['country']
        months = {
          'January': '–Ø–Ω–≤–∞—Ä—è',
          'February': '–§–µ–≤—Ä–∞–ª—è',
          'March': '–ú–∞—Ä—Ç–∞',
          'April': '–ê–ø—Ä–µ–ª—è',
          'May': '–ú–∞—è',
          'June': '–ò—é–Ω—è',
          'July': '–ò—é–ª—è',
          'August': '–ê–≤–≥—É—Å—Ç–∞',
          'September': '–°–µ–Ω—Ç—è–±—Ä—è',
          'October': '–û–∫—Ç—è–±—Ä—è',
          'November': '–ù–æ—è–±—Ä—è',
          'December': '–î–µ–∫–∞–±—Ä—è'
        }
        local_time = datetime.strptime(data['location']['localtime'], '%Y-%m-%d %H:%M').strftime('%d %B %Y %H:%M')
        local_time = ' '.join([months.get(month, month) for month in local_time.split()])

        alerts_message = f'üèôÔ∏è–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –≥–æ—Ä–æ–¥–µ: {location}\nüóìÔ∏è–í—Ä–µ–º—è –∏ –¥–∞—Ç–∞: {local_time}\n\n'

      
        for i in range(len(data['alerts']['alert'])):  # Display only alerts 0 and 1
                alert = data['alerts']['alert'][i]
                event = alert.get('event', 'Unknown Event')
                if not re.search(r'[–∞-—è–ê-–Ø]', event):  
                    continue
                desc = alert.get('desc', 'No Description')
                effective = datetime.strptime(alert.get('effective', 'Unknown Effective Time'), '%Y-%m-%dT%H:%M:%S%z').strftime('%d %B %Y %H:%M (–ú–°–ö)')
                expires = datetime.strptime(alert.get('expires', 'Unknown Expiry Time'), '%Y-%m-%dT%H:%M:%S%z').strftime('%d %B %Y %H:%M (–ú–°–ö)')
                effective = ' '.join([months.get(month, month) for month in effective.split()])
                expires = ' '.join([months.get(month, month) for month in expires.split()])


                alerts_message += f'‚ö†Ô∏è–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {event}\nüìù–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\nüïô–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {effective}\nüïì–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è: {expires}\n\n'
              
        bot.send_message(message.from_user.id, alerts_message)
    except KeyError:
        bot.send_message(message.from_user.id, f'–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥!')
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–ø–æ–≥–æ–¥–µ

@bot.message_handler(commands=['weatherwebsites'])
def websites_weather(message):
  bot.send_message(message.from_user.id, '–ü–æ–ª–µ–∑–Ω—ã–µ —Å–∞–π—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:\n\n1) ‚ö°–°–∏—Å—Ç–µ–º–∞ –≥—Ä–æ–∑–æ–ø–µ–ª–µ–Ω–≥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–ª–Ω–∏–π –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É: https://map.blitzortung.org/#5.13/56.37/40.11\n\n2) üõ∞Ô∏è–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤ –ø–æ –ï–≤—Ä–æ–ø–µ –∏ –†–æ—Å—Å–∏–∏: https://zelmeteo.ru\n\n3) üìä–°–∞–π—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø—Ä–æ–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É: https://meteologix.com')
#echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã –ø–æ–≥–æ–¥—ã

def get_icao_code_by_name(airport_name):
  # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ ICAO-–∫–æ–¥–∞
  airports = {
      # –†–æ—Å—Å–∏—è
      "—à–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ": "UUEE",
      "–¥–æ–º–æ–¥–µ–¥–æ–≤–æ": "UUDD",
      "–≤–Ω—É–∫–æ–≤–æ": "UUWW",
      "–∂—É–∫–æ–≤—Å–∫–∏–π": "UUBW",
      "–∞–±–∞–∫–∞–Ω": "UNAA",
      "–∞–Ω–∞–¥—ã—Ä—å": "UHMA",
      "–∞–Ω–∞–ø–∞": "URKA",
      "–∞–ø–∞—Ç–∏—Ç—ã": "ULMK",
      "–∞—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫": "ULAA",
      "–∞—Å—Ç—Ä–∞—Ö–∞–Ω—å": "URWA",
      "–±–∞—Ä–Ω–∞—É–ª": "UNBB",
      "–±–µ–ª–≥–æ—Ä–æ–¥": "UUOB",
      "–±–µ—Ä–µ–∑–æ–≤–æ": "USHB",
      "–±–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫": "UNEE",
      "–±—Ä—è–Ω—Å–∫": "UUBP",
      "–±—É–≥—É–ª—å–º–∞": "UWKB",
      "–≤–µ–ª–∏–∫–∏–π —É—Å—Ç—é–≥": "ULWU",
      "–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": "ULNN",
      "–≤–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑": "URMO",
      "–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫": "UHWW",
      "–≤–æ–ª–≥–æ–≥—Ä–∞–¥": "URWW",
      "–≤–æ–ª–æ–≥–¥–∞": "ULWW",
      "–≤–æ—Ä–æ–Ω–µ–∂": "UUOO",
      "–≤–æ—Ä–∫—É—Ç–∞": "UUYW",
      "–≥–µ–ª–µ–Ω–¥–∂–∏–∫": "URKG",
      "–≥–æ—Ä–Ω–æ-–∞–ª—Ç–∞–π—Å–∫": "UNBG",
      "–≥—Ä–æ–∑–Ω—ã–π": "URMG",
      "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "USSS",
      "–∏–≥–∞—Ä–∫–∞": "UOII",
      "–∏–∂–µ–≤—Å–∫": "USHH",
      "–∏—Ä–∫—É—Ç—Å–∫": "UIII",
      "–π–æ—à–∫–∞—Ä-–æ–ª–∞": "UWKJ",
      "–∫–∞–∑–∞–Ω—å": "UWKD",
      "–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": "UMKK",
      "–∫–∞–ª—É–≥–∞": "UUBC",
      "–∫–µ–º–µ—Ä–æ–≤–æ": "UNEE",
      "–∫–∏—Ä–æ–≤": "USKK",
      "–∫–æ—Å—Ç—Ä–æ–º–∞": "UUBA",
      "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä": "URKK",
      "–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "UNKL",
      "–∫—É—Ä–≥–∞–Ω": "USUU",
      "–∫—É—Ä—Å–∫": "UUOK",
      "–∫—ã–∑—ã–ª": "UNKY",
      "–ª–∏–ø–µ—Ü–∫": "UUOL",
      "–º–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫": "USCM",
      "–º–∞—Ö–∞—á–∫–∞–ª–∞": "URML",
      "–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–¥—ã": "URMM",
      "–º—É—Ä–º–∞–Ω—Å–∫": "ULMM",
      "–Ω–∞–¥—ã–º": "USMN",
      "–Ω–∞–ª—å—á–∏–∫": "URMN",
      "–Ω–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫": "USNN",
      "–Ω–∏–∂–Ω–µ–∫–∞–º—Å–∫": "UWKN",
      "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": "UWGG",
      "–Ω–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫": "UNWW",
      "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "UNCC",
      "–Ω–æ–≤—ã–π —É—Ä–µ–Ω–≥–æ–π": "USMU",
      "–æ–º—Å–∫": "UNOO",
      "–æ—Ä–µ–Ω–±—É—Ä–≥": "UWOO",
      "–æ—Ä—Å–∫": "UWOR",
      "–ø–µ–Ω–∑–∞": "UWPP",
      "–ø–µ—Ä–º—å": "USPP",
      "–ø–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫": "ULPB",
      "–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–∫–∞–º—á–∞—Ç—Å–∫–∏–π": "UHPP",
      "–ø—Å–∫–æ–≤": "ULOO",
      "—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É": "URRR",
      "—Ä—è–∑–∞–Ω—å": "UWDR",
      "—Å–∞–º–∞—Ä–∞": "UWWW",
      "–ø—É–ª–∫–æ–≤–æ": "ULLI",
      "—Å–∞—Ä–∞–Ω—Å–∫": "UWPS",
      "—Å–∞—Ä–∞—Ç–æ–≤": "UWSS",
      "—Å–æ—á–∏": "URSS",
      "—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å": "URMT",
      "—Å—É—Ä–≥—É—Ç": "USRR",
      "—Å—ã–∫—Ç—ã–≤–∫–∞—Ä": "UUYY",
      "—Ç–∞–º–±–æ–≤": "UUOT",
      "—Ç–æ–º—Å–∫": "UNTT",
      "—Ç—é–º–µ–Ω—å": "USTR",
      "—É–ª—å—è–Ω–æ–≤—Å–∫": "UWLL",
      "—É—Ñ–∞": "UWUU",
      "—Ö–∞–±–∞—Ä–æ–≤—Å–∫": "UHHH",
      "—Ö–∞–Ω—Ç—ã-–º–∞–Ω—Å–∏–π—Å–∫": "USHN",
      "—á–µ–±–æ–∫—Å–∞—Ä—ã": "UWKS",
      "—á–µ–ª—è–±–∏–Ω—Å–∫": "USCC",
      "—á–µ—Ä–µ–ø–æ–≤–µ—Ü": "ULWC",
      "—á–∏—Ç–∞": "UITA",
      "—é–∂–Ω–æ-—Å–∞—Ö–∞–ª–∏–Ω—Å–∫": "UHSS",
      "—è–∫—É—Ç—Å–∫": "UEEE",
      "—è—Ä–æ—Å–ª–∞–≤–ª—å": "UUDL",

      # –ë–µ–ª–∞—Ä—É—Å—å
      "–º–∏–Ω—Å–∫": "UMMS",
      "–º–∏–Ω—Å–∫-1": "UMMM",
      "–±—Ä–µ—Å—Ç": "UMBB",
      "–≤–∏—Ç–µ–±—Å–∫": "UMII",
      "–≥–æ–º–µ–ª—å": "UMGG",
      "–≥—Ä–æ–¥–Ω–æ": "UMMG",
      "–º–æ–≥–∏–ª–µ–≤": "UMOO",
  }
  return airports.get(airport_name.lower())

@bot.message_handler(commands=['weatherairports'])
def get_airport_weather(message):
    msg5 = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, UUEE –∏–ª–∏ –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ)')
    bot.register_next_step_handler(msg5, display_airport_weather)

def display_airport_weather(message, bot=bot):
    user_input = message.text.strip().upper()

    if len(user_input) == 4 and user_input.isalpha():
        airport_code = user_input
    else:
        airport_code = get_icao_code_by_name(user_input)

    if not airport_code:
        bot.send_message(message.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç –ø–æ —ç—Ç–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    api_airport_url = f'https://metartaf.ru/{airport_code}.json'
    response = requests.get(api_airport_url)

    if response.status_code == 200:
        data = response.json()
        weather_info = f"üåê –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞: {data['icao']}\n\n"
        weather_info += f"‚úàÔ∏è –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç—É: {data['name']}\n\n"
        weather_info += f"üìç METAR-—Å–≤–æ–¥–∫–∞ –ø–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç—É: `{data['metar']}`\n"
        weather_info += f"üåÄ TAF-–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç—É: `{data['taf']}`\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        inline_keyboard = types.InlineKeyboardMarkup()

        decode_can = types.InlineKeyboardButton("–ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ?", callback_data='how_to_decode')

        inline_keyboard.add(decode_can)

        bot.send_message(
            message.chat.id,
            weather_info,
            reply_markup=inline_keyboard,
            parse_mode="MARKDOWN"
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ?"
        @bot.callback_query_handler(func=lambda call: call.data == 'how_to_decode')
        def handle_how_to_decode(callback):
            how_to_message = (
                "üõ† –ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å METAR –∏ TAF —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ:\n\n"
                "üìÑ **METAR** ‚Äî —ç—Ç–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –Ω–∞ –∞—ç—Ä–æ–¥—Ä–æ–º–µ. "
                "–û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã METAR:\n"
                "- ICAO-–∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, UUEE ‚Äî –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ).\n"
                "- –í—Ä–µ–º—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 121200Z ‚Äî 12-–µ —á–∏—Å–ª–æ, 12:00 UTC).\n"
                "- –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: –æ–±–ª–∞—á–Ω–æ—Å—Ç—å, –≤–∏–¥–∏–º–æ—Å—Ç—å, –æ—Å–∞–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SCT030 ‚Äî —Ä–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ 3000 —Ñ—É—Ç–æ–≤).\n"
                "- –í–µ—Ç–µ—Ä: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18010KT ‚Äî –≤–µ—Ç–µ—Ä —Å —é–≥–∞, 10 —É–∑–ª–æ–≤).\n\n"
                "üìÑ **TAF** ‚Äî —ç—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –∞—ç—Ä–æ–¥—Ä–æ–º–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. "
                "–û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ç—Ä–µ, –≤–∏–¥–∏–º–æ—Å—Ç–∏, –æ–±–ª–∞–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö. "
                "–ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã TAF:\n"
                "- –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1212/1312 ‚Äî —Å 12:00 12-–≥–æ —á–∏—Å–ª–∞ –¥–æ 12:00 13-–≥–æ —á–∏—Å–ª–∞).\n"
                "- –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: TEMPO, BECMG, PROB (–Ω–∞–ø—Ä–∏–º–µ—Ä, TEMPO 1418 ‚Äî –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å 14:00 –¥–æ 18:00).\n\n"
                "üìå –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π:\n"
                "- [–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ METAR –∏ TAF](https://www.iflightplanner.com/resources/metartaftranslator.aspx)\n"
            )
            bot.send_message(
                callback.message.chat.id,
                how_to_message,
                parse_mode="MARKDOWN",
                disable_web_page_preview=True
            )
    else:
        bot.send_message(
            message.chat.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞."
        )
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤

@bot.message_handler(commands=['meteograms'])
def start_meteogram_request(message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏: "–û–¥–∏–Ω –≥–æ—Ä–æ–¥" –∏ "–ù–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤"
    keyboard = types.InlineKeyboardMarkup()
    one_city_btn = types.InlineKeyboardButton(text="–û–¥–∏–Ω –≥–æ—Ä–æ–¥", callback_data="one_city")
    several_cities_btn = types.InlineKeyboardButton(text="–ù–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤", callback_data="several_cities")
    keyboard.add(one_city_btn, several_cities_btn)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=keyboard)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data in ["one_city", "several_cities"])
def choose_city_mode(call):
    if call.data == "one_city":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
        bot.register_next_step_handler(call.message, send_meteogram)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    elif call.data == "several_cities":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (‚ö†Ô∏è–ú–∞–∫—Å–∏–º—É–º 10 –≥–æ—Ä–æ–¥–æ–≤)")
        bot.register_next_step_handler(call.message, send_several_meteograms)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤

def send_meteogram(message):
    start_time = time.time()
    city_name = message.text.strip().upper()

    city_info = next((city for city in city_data if city['eng_name'] == city_name), None)

    if city_info:
        city_url = city_info['url']
        response = requests.get(city_url)

        if response.status_code == 200:
            end_time = time.time()
            elapsed_time = end_time - start_time
            bot.send_photo(message.chat.id, response.content, caption=f'–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name.capitalize()}\n–í—Ä–µ–º—è –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥')
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
    else:
        bot.reply_to(message, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç–µ–æ–≥—Ä–∞–º–º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º
    start_meteogram_request(message)

def send_several_meteograms(message):
    start_time = time.time()
    cities = [city.strip().upper() for city in message.text.split(',') if city.strip()]  # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    cities = cities[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ 10 –≥–æ—Ä–æ–¥–æ–≤

    if not cities:
        bot.reply_to(message, "–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        start_meteogram_request(message)
        return

    for city_name in cities:
        city_info = next((city for city in city_data if city['eng_name'] == city_name), None)

        if city_info:
            city_url = city_info['url']
            response = requests.get(city_url)

            if response.status_code == 200:
                end_time = time.time()
                elapsed_time = end_time - start_time
                bot.send_photo(message.chat.id, response.content, caption=f'–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name.capitalize()}\n–í—Ä–µ–º—è –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥')
            else:
                bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}.")
        else:
            bot.reply_to(message, f"–ì–æ—Ä–æ–¥ {city_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –º–µ—Ç–µ–æ–≥—Ä–∞–º–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º
    start_meteogram_request(message)

# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Ç–µ–æ–≥—Ä–∞–º–º—ã —Å —Å–∞–π—Ç–∞ meteorf

def get_fmeteo_image_and_info(run_time, forecast_hour, map_type="prec"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –∏ —Ç–∏–ø–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å fmeteo.ru.

    Args:
        run_time (str): –í—Ä–µ–º—è –ø—Ä–æ–≥–æ–Ω–∞ (00, 06, 12, 18).
        forecast_hour (str): –í—Ä–µ–º—è –∫–∞—Ä—Ç—ã –ø–æ —á–∞—Å–∞–º (003, 006, ..., 384).
        map_type (str): –¢–∏–ø –∫–∞—Ä—Ç—ã (prec, temp, temp8, 850hpa, cloudst, cloudsh, wind, licape, snd, tef).

    Returns:
        tuple: (URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–µ) –∏–ª–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, None).
    """

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã
    type_mapping = {
        "prec": ("prec", "üåßÔ∏è –û—Å–∞–¥–∫–∏"),
        "temp": ("temp", "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ 2–º"),
        "temp8": ("temp8", "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ 850 –≥–ü–∞"),
        "cloudst": ("cloudst", "‚òÅÔ∏è –ù–∏–∑–∫–∞—è-—Å—Ä–µ–¥–Ω—è—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"),
        "cloudsh": ("cloudsh", "‚òÅÔ∏è –í–µ—Ä—Ö–Ω—è—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"),
        "wind": ("wind", "üí® –í–µ—Ç–µ—Ä"),
        "licape": ("licape", "‚ö° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"),
        "snd": ("snd", "‚ùÑÔ∏è –í—ã—Å–æ—Ç–∞ —Å–Ω–µ–∂–Ω–æ–≥–æ –ø–æ–∫—Ä–æ–≤–∞"),
        "tef": ("tef", "üå°Ô∏è –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    }

    if map_type not in type_mapping:
        return f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–∞—Ä—Ç—ã –¥–ª—è fmeteo. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(type_mapping.keys())}", None

    type_code, map_type_text = type_mapping[map_type]
    url = f"http://fmeteo.ru/gfs/{run_time}/{type_code}_{forecast_hour}.png"
    headers = {"Cache-Control": "no-cache"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        run_time_hour = int(run_time)
        forecast_hour_int = int(forecast_hour)
        current_date = datetime.utcnow()

        forecast_date = current_date.replace(hour=run_time_hour, minute=0, second=0, microsecond=0)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç—ã, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥–æ–Ω–∞
        if current_date.hour >= run_time_hour:
            forecast_date = forecast_date
        else:
            forecast_date -= timedelta(days=1)

        forecast_date += timedelta(hours=forecast_hour_int)
        forecast_date_str = forecast_date.strftime("%Y-%m-%d %H:%M") + " UTC"

        info = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {forecast_date_str}"
        return url, info, map_type_text
    else:
        return f"–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã {map_type} –∑–∞ {forecast_hour} —á–∞—Å–æ–≤.", None, None

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /get_meteoweb –¥–ª—è —É—á–µ—Ç–∞ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç –∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
@bot.message_handler(commands=['get_meteoweb'])
def get_map_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_meteoweb. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
    –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º.
    """
    instruction = (
    "üåç *–ö–æ–º–∞–Ω–¥–∞ /get_meteoweb* ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–≥–æ–¥—ã –æ—Ç Meteoweb!\n\n"
    "üìù *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
    "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    "`–≤—Ä–µ–º—è_–ø—Ä–æ–≥–æ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π_—á–∞—Å –∫–æ–Ω–µ—á–Ω—ã–π_—á–∞—Å —Ç–∏–ø_–∫–∞—Ä—Ç—ã`\n\n"
    "üîç *–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"
    "‚Ä¢ `00 003 027 prec` ‚Äî –∫–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤ —Å 3 –ø–æ 27 —á–∞—Å –ø—Ä–æ–≥–Ω–æ–∑–∞.\n"
    "‚Ä¢ `12 006 036 temp` ‚Äî –∫–∞—Ä—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å 6 –ø–æ 36 —á–∞—Å.\n"
    "‚Ä¢ `00 003 024 temp8` ‚Äî –∫–∞—Ä—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ 850 –≥–ü–∞ —Å 3 –ø–æ 24 —á–∞—Å.\n\n"
    "üìä *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫–∞—Ä—Ç:*\n"
    "‚Ä¢ `prec` ‚Äî –æ—Å–∞–¥–∫–∏ üåßÔ∏è\n"
    "‚Ä¢ `temp` ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ üå°Ô∏è\n"
    "‚Ä¢ `temp8` ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ 850 –≥–ü–∞ üóª\n"
    "‚Ä¢ `cloudst` ‚Äî –æ–±—â–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚òÅÔ∏è\n"
    "‚Ä¢ `cloudsh` ‚Äî –≤—ã—Å–æ–∫–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å üå´Ô∏è\n"
    "‚Ä¢ `wind` ‚Äî –≤–µ—Ç–µ—Ä üå¨Ô∏è\n"
    "‚Ä¢ `licape` ‚Äî –∏–Ω–¥–µ–∫—Å –Ω–µ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ (LICAPE) ‚ö°\n"
    "‚Ä¢ `snd` ‚Äî —Å–Ω–µ–∂–Ω—ã–π –ø–æ–∫—Ä–æ–≤ ‚ùÑÔ∏è\n"
    "‚Ä¢ `tef` ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è üå°Ô∏è\n\n"
    "‚ö†Ô∏è *–í–∞–∂–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
    "‚Ä¢ –ó–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 –∫–∞—Ä—Ç.\n"
    "‚Ä¢ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫–∞—Ä—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.\n\n"
    )
    msg = bot.send_message(message.chat.id, instruction, parse_mode="Markdown")
    bot.register_next_step_handler(msg, process_map_request)

def calculate_forecast_time(run_time, forecast_hour):
  """
  –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥–æ–Ω–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–≥–æ —á–∞—Å–∞.
  """
  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥–æ–Ω–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (00, 06, 12, 18)
  run_time_hour = int(run_time)
  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
  forecast_hour = int(forecast_hour)
  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC
  current_date = datetime.utcnow()

  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≥–æ–Ω–∞ –Ω–∞ –±–∞–∑–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  forecast_date = current_date.replace(hour=run_time_hour, minute=0, second=0, microsecond=0)

  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥–æ–Ω–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
  if current_date.hour < run_time_hour:
      forecast_date -= timedelta(days=1)
  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ —á–∞—Å—ã –∫ –¥–∞—Ç–µ –ø—Ä–æ–≥–æ–Ω–∞
  forecast_date += timedelta(hours=forecast_hour)

  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC
  return forecast_date.strftime("%Y-%m-%d %H:%M") + " UTC"

def process_map_request(message):
  try:
      # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      parts = message.text.split()
      if len(parts) != 4:
          raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –û–∂–∏–¥–∞–µ—Ç—Å—è: –≤—Ä–µ–º—è –ø—Ä–æ–≥–æ–Ω–∞, –Ω–∞—á–∞–ª—å–Ω—ã–π —á–∞—Å, –∫–æ–Ω–µ—á–Ω—ã–π —á–∞—Å, —Ç–∏–ø –∫–∞—Ä—Ç—ã.")

      # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      run_time = parts[0]
      start_hour = int(parts[1])
      end_hour = int(parts[2])
      map_type = parts[3].lower()

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥–æ–Ω–∞
      if run_time not in ["00", "06", "12", "18"]:
          raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥–æ–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 00, 06, 12, 18.")

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      if not (3 <= start_hour <= 384 and start_hour % 3 == 0):
          raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 003 –¥–æ 384 —Å —à–∞–≥–æ–º –≤ 3 —á–∞—Å–∞.")

      if not (3 <= end_hour <= 384 and end_hour % 3 == 0):
          raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 003 –¥–æ 384 —Å —à–∞–≥–æ–º –≤ 3 —á–∞—Å–∞.")

      if start_hour > end_hour:
          raise ValueError("–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ.")

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã
      if map_type not in ["prec", "temp", "temp8", "cloudst", "cloudsh", "wind", "licape", "snd", "tef"]:
          raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–∞—Ä—Ç—ã. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: prec, temp, temp8, cloudst, cloudsh, wind, licape, snd, tef.")

      # –°–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å —à–∞–≥–æ–º 3
      forecast_hours = list(range(start_hour, end_hour + 1, 3))

      # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
      max_images_per_request = 10
      if len(forecast_hours) > max_images_per_request:
          bot.send_message(
              message.chat.id,
              f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç: –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ {max_images_per_request} –∫–∞—Ä—Ç –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å. "
              f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏."
          )
          return

      # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç
      with concurrent.futures.ThreadPoolExecutor() as executor:
          futures = [
              executor.submit(get_fmeteo_image_and_info, run_time, f"{hour:03}", map_type)
              for hour in forecast_hours
          ]
          results = [future.result() for future in futures]

      # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10 –∫–∞—Ä—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
      for i in range(0, len(results), max_images_per_request):
          chunk = results[i:i + max_images_per_request]
          media_group = []

          # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç
          map_type_text = None

          for result in chunk:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ç–µ–∂–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
            if len(result) == 3:
                url, info, current_map_type_text = result
            else:
                # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
            if url.startswith("http"):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–∞—Ä—Ç—ã (map_type_text) —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                if map_type_text is None:
                    map_type_text = current_map_type_text
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞
                media_group.append(InputMediaPhoto(url, caption=info))
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–π
                bot.send_message(message.chat.id, url)

          months = {
            'January': '–Ø–Ω–≤–∞—Ä—è',
            'February': '–§–µ–≤—Ä–∞–ª—è',
            'March': '–ú–∞—Ä—Ç–∞',
            'April': '–ê–ø—Ä–µ–ª—è',
            'May': '–ú–∞—è',
            'June': '–ò—é–Ω—è',
            'July': '–ò—é–ª—è',
            'August': '–ê–≤–≥—É—Å—Ç–∞',
            'September': '–°–µ–Ω—Ç—è–±—Ä—è',
            'October': '–û–∫—Ç—è–±—Ä—è',
            'November': '–ù–æ—è–±—Ä—è',
            'December': '–î–µ–∫–∞–±—Ä—è'
          }

          # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
          start_forecast_time = calculate_forecast_time(run_time, start_hour).replace(" UTC", "")
          end_forecast_time = calculate_forecast_time(run_time, end_hour).replace(" UTC", "")

          start_forecast_date = datetime.strptime(start_forecast_time, "%Y-%m-%d %H:%M")
          end_forecast_date = datetime.strptime(end_forecast_time, "%Y-%m-%d %H:%M")

          # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –º–µ—Å—è—Ü–∞–º–∏
          start_forecast_date_str = start_forecast_date.strftime("%d %B %Y %H:%M") + " UTC"
          end_forecast_date_str = end_forecast_date.strftime("%d %B %Y %H:%M") + " UTC"

          # –ó–∞–º–µ–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –º–µ—Å—è—Ü—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–µ
          for eng_month, rus_month in months.items():
              start_forecast_date_str = start_forecast_date_str.replace(eng_month, rus_month)
              end_forecast_date_str = end_forecast_date_str.replace(eng_month, rus_month)

          # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç
          caption = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —Å {start_forecast_date_str} –ø–æ {end_forecast_date_str}\n"
          if map_type in ["prec", "temp", "temp8", "cloudst", "cloudsh", "wind", "licape", "snd", "tef"]:
              caption += f"–¢–∏–ø –∫–∞—Ä—Ç—ã: {map_type_text}\n"
          else:
              caption += "–¢–∏–ø –∫–∞—Ä—Ç—ã: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω\n"

          if media_group:
              try:
                  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                  bot.send_media_group(message.chat.id, media_group)
                  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –ø–æ–¥–ø–∏—Å—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø—ã
                  bot.send_message(message.chat.id, caption)
              except Exception as e:
                  # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                  bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")

  except ValueError as e:
          # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
          bot.send_message(
              message.chat.id,
              f"–û—à–∏–±–∫–∞: {e}.\n\n"
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É: `–≤—Ä–µ–º—è_–ø—Ä–æ–≥–æ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π_—á–∞—Å –∫–æ–Ω–µ—á–Ω—ã–π_—á–∞—Å —Ç–∏–ø_–∫–∞—Ä—Ç—ã`\n"
              "–ü—Ä–∏–º–µ—Ä—ã:\n"
              "`00 003 027 prec`\n"
              "`12 006 036 temp`\n"
              "`00 003 024 temp8`",
              parse_mode="Markdown",
          )

  except Exception as e:
          # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
          bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
# echo-—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç –º–µ—Ç–µ–æ–≤–µ–±

@bot.message_handler(commands=['firehazard_map'])
def get_firehazard_map(message):
  url = "https://meteoinfo.ru/images/vasiliev/plazma_ppo3.gif"
  response = requests.get(url)

  if response.status_code == 200:
   with open('plazma_ppo3.gif', 'wb') as f:
    f.write(response.content)

    with open('plazma_ppo3.gif', 'rb') as f:
        bot.send_animation(message.from_user.id, f, caption='–ö–∞—Ä—Ç–∞ –ø–æ–∂–∞—Ä–æ–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ –†–§')

    os.remove('plazma_ppo3.gif')
  else:
   bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ–∂–∞—Ä–æ–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ –†–§

def get_extrainfo():
    url = 'https://meteoinfo.ru/extrainfopage'

    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
    except requests.RequestException as e:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö.", ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."], "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

    soup = BeautifulSoup(response.text, 'html.parser')

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_header = soup.find('div', class_='page-header')
    headline = page_header.find('h1').text.strip() if page_header and page_header.find('h1') else "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ –±–ª–æ–∫–µ 'div_1'
    extrainfo = []
    info_blocks = soup.find_all('div', id='div_1')

    for block in info_blocks:
        rows = block.find_all('tr')
        for row in rows:
            cells = row.find_all('td')
            cell_texts = [cell.get_text(strip=True) for cell in cells]
            if cell_texts:
                extrainfo.append(" | ".join(cell_texts))

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ 5
    extrainfo = extrainfo[:7] if extrainfo else ["–ù–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."]

    # –ò—â–µ–º –±–ª–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ 'div_2'
    additional_info = []
    div_2 = soup.find('div', id='div_2')
    if div_2:
        rows = div_2.find_all('tr')
        for row in rows:
            cell = row.find('td')
            if cell and cell.text.strip():
                additional_info.append(cell.text.strip())

    additional_info_text = "\n".join(additional_info) if additional_info else "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

    return headline, extrainfo, additional_info_text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extrainfo
@bot.message_handler(commands=['extrainfo'])
def send_extrainfo(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        headline, extrainfo, additional_info = get_extrainfo()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        combined_message = f"‚ö†Ô∏è <b>{headline}</b> ‚ö†Ô∏è\n\n" + "\n\n".join(extrainfo)
        combined_message += "\n\n‚Äî ‚Äî ‚Äî\n\n" + additional_info

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, combined_message, parse_mode='HTML')
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode='HTML')
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≥–∏–¥—Ä–æ–º–µ—Ç—Ü–µ–Ω—Ç—Ä–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —Å —Å–∞–π—Ç–∞
regions_dict = {
    "–∞–¥—ã–≥–µ—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-adygea",
    "–∞–ª—Ç–∞–π —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-altai",
    "–∞–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π": "territory-altai",
    "–∞–º—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "amur-area",
    "–∞—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "arkhangelsk-area",
    "–∞—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "astrakhan-area",
    "–±–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-bashkortostan",
    "–±–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "belgorod-area",
    "–±—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "bryansk-area",
    "–±—É—Ä—è—Ç–∏—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-buryatia",
    "–≤–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "vladimir-area",
    "–≤–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "volgograd-area",
    "–≤–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "vologda-area",
    "–≤–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "voronezh-area",
    "–¥–∞–≥–µ—Å—Ç–∞–Ω —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-dagestan",
    "–¥–æ–Ω–µ—Ü–∫–∞—è –Ω–∞—Ä–æ–¥–Ω–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-donetsk",
    "–µ–≤—Ä–µ–π—Å–∫–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –æ–±–ª–∞—Å—Ç—å": "evr-avt-obl",
    "–∑–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π": "territory-zabaykalsky",
    "–∑–∞–ø–æ—Ä–æ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "zaporizhzhia-area",
    "–∏–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "ivanovo-area",
    "–∏–Ω–≥—É—à–µ—Ç–∏—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-ingushetia",
    "–∏—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "irkutsk-area",
    "–∫–∞–±–∞—Ä–¥–∏–Ω–æ-–±–∞–ª–∫–∞—Ä–∏—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-kabardino-balkaria",
    "–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "kaliningrad-area",
    "–∫–∞–ª–º—ã–∫–∏—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-kalmykia",
    "–∫–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "kaluga-area",
    "–∫–∞–º—á–∞—Ç—Å–∫–∏–π –∫—Ä–∞–π": "territory-kamchatka",
    "–∫–∞—Ä–∞—á–∞–µ–≤–æ-—á–µ—Ä–∫–µ—Å–∏—è": "republic-karachay-cherkessia",
    "–∫–∞—Ä–µ–ª–∏—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-karelia",
    "–∫–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "kemerovo-area",
    "–∫–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "kirov-area",
    "–∫–æ–º–∏ —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-komi",
    "–∫–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "kostroma-area",
    "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π": "krasnodar-territory",
    "–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π": "territory-krasnoyarsk",
    "–∫—Ä—ã–º —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-crimea",
    "–∫—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "kurgan-area",
    "–∫—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "kursk-area",
    "–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "leningrad-region",
    "–ª–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "lipetsk-area",
    "–ª—É–≥–∞–Ω—Å–∫–∞—è –Ω–∞—Ä–æ–¥–Ω–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-lugansk",
    "–º–∞–≥–∞–¥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "magadan-area",
    "–º–∞—Ä–∏–π —ç–ª —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-mari-el",
    "–º–æ—Ä–¥–æ–≤–∏—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-mordovia",
    "–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "moscow-area",
    "–º—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "murmansk-area",
    "–Ω–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥": "autonomous-area-nenets",
    "–Ω–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "nizhny-novgorod-area",
    "–Ω–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "novgorod-area",
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "novosibirsk-area",
    "–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "omsk-area",
    "–æ—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "orenburg-area",
    "–æ—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "oryol-area",
    "–ø–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "penza-area",
    "–ø–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π": "territory-perm",
    "–ø—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π": "territory-primorsky",
    "–ø—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "pskov-area",
    "—Ä–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "rostov-area",
    "—Ä—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "ryazan-area",
    "—Å–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "samara-area",
    "—Å–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "saratov-area",
    "—Å–∞—Ö–∞(—è–∫—É—Ç–∏—è) —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-sakha-yakutia",
    "—Å–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "sakhalin-area",
    "—Å–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "sverdlovsk-area",
    "—Å–µ–≤–µ—Ä–Ω–∞—è –æ—Å–µ—Ç–∏—è-–∞–ª–∞–Ω–∏—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-north-ossetia-alania",
    "—Å–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "smolensk-area",
    "—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π": "territory-stavropol",
    "—Ç–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "tambov-area",
    "—Ç–∞—Ç–∞—Ä—Å—Ç–∞–Ω —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-tatarstan",
    "—Ç–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "tver-area",
    "—Ç–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "tomsk-area",
    "—Ç—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "tula-area",
    "—Ç—ã–≤–∞ —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-tyva",
    "—Ç—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "tyumen-area",
    "—É–¥–º—É—Ä—Ç–∏—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-udmurtia",
    "—É–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "ulyanovsk-area",
    "—Ö–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π": "territory-khabarovsk",
    "—Ö–∞–∫–∞—Å–∏—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-khakassia",
    "—Ö–∞–Ω—Ç—ã-–º–∞–Ω—Å–∏–π—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥": "autonomous-area-khanty-mansi",
    "—Ö–µ—Ä—Å–æ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "kherson-region",
    "—á–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "chelyabinsk-area",
    "—á–µ—á–µ–Ω—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-chechen",
    "—á—É–≤–∞—à—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞": "republic-chuvash",
    "—á—É–∫–æ—Ç—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥": "autonomous-area-chukotka",
    "—è–º–∞–ª–æ-–Ω–µ–Ω–µ—Ü–∫–∏–π –∞–æ": "autonomous-area-yamalo-nenets",
    "—è—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "yaroslavl-area",
}

# –°–ª–æ–≤–∞—Ä—å —Å—Ç–∞–Ω—Ü–∏–π
stations_dict = {
    "–∫–ª–∏–Ω": "klin",
    "–º–æ—Å–∫–≤–∞": "moscow",
    "–∫–∞–ª—É–≥–∞": "kaluga-A",
    "—Ç–≤–µ—Ä—å": "tver",
    "–±—ã–∫–æ–≤–æ": "bykovo",
    "–≤–Ω—É–∫–æ–≤–æ": "vnukovo",
    "–≤–æ–ª–æ–∫–æ–ª–∞–º—Å–∫": "volokolamsk",
    "–¥–º–∏—Ç—Ä–æ–≤": "dmitrov",
    "–¥–æ–º–æ–¥–µ–¥–æ–≤–æ": "domodedovo",
    "–µ–≥–æ—Ä—å–µ–≤—Å–∫": "egorevsk",
    "–∫–∞—à–∏—Äa": "kashira",
    "–∫–æ–ª–æ–º–Ω–∞": "kolomna",
    "–º–æ–∂–∞–π—Å–∫": "mozhaysk",
    "–º–æ—Å–∫–≤–∞ –≤–¥–Ω—Ö": "moscow",
    "–º–æ—Å–∫–≤–∞ –±–∞–ª—á—É–≥": "moskva-balchug",
    "–Ω–∞—Ä–æ-—Ñ–æ–º–∏–Ω—Å–∫": "naro-fominsk",
    "–Ω–µ–º—á–∏–Ω–æ–≤–∫–∞": "nemchinovka",
    "–Ω–æ–≤–æ-–∏–µ—Ä—É—Å–∞–ª–∏–º": "novo-jerusalim",
    "–æ—Ä–µ—Ö–æ–≤–æ-–∑—É–µ–≤–æ": "orekhovo-zuevo",
    "–ø–∞–≤–ª–æ–≤—Å–∫–∏–π –ø–æ—Å–∞–¥": "pavlovsky-posad",
    "–ø–∞–≤–ª–æ–≤—Å–∫–æ–µ": "pavlovskoe",
    "—Å–µ—Ä–≥–∏–µ–≤ –ø–æ—Å–∞–¥": "sergiev-posad",
    "—Å–µ—Ä–ø—É—Ö–æ–≤": "serpukhov",
    "—Ç—Ä–µ—Ç—å—è–∫–æ–≤–æ": "tretyakovo",
    "—á–µ—Ä—É—Å—Ç–∏": "cherusti",
    "—à–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ": "sheremetyevo",
    "–∂–µ–ª–µ–∑–Ω–æ–≥–æ—Ä—Å–∫": "zheleznogorsk",
    "–∫—É—Ä—Å–∫": "kursk",
    "–∫—É—Ä—á–∞—Ç–æ–≤": "kurchatov",
    "–æ–±–æ—è–Ω—å": "oboyan",
    "–ø–æ–Ω—ã—Ä–∏": "ponyri",
    "—Ä—ã–ª—å—Å–∫": "rylsk",
    "—Ç–∏–º": "tim",
    "–º–∞–π–∫–æ–ø": "majkop",
    "–≥–æ—Ä–Ω–æ-–∞–ª—Ç–∞–π—Å–∫": "gorno-altaysk",
    "–±–∞—Ä–Ω–∞—É–ª": "barnaul",
    "–±–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫": "blagoveshchensk",
    "–∞—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫": "arkhangelsk",
    "–∞—Å—Ç—Ä–∞—Ö–∞–Ω—å": "astrakhan",
    "—É—Ñ–∞": "ufa",
    "–±–µ–ª–≥–æ—Ä–æ–¥": "belgorod",
    "–±—Ä—è–Ω—Å–∫": "bryansk",
    "—É–ª–∞–Ω-—É–¥—ç": "ulan-ude",
    "–≤–ª–∞–¥–∏–º–∏—Ä": "vladimir",
    "–≤–æ–ª–≥–æ–≥—Ä–∞–¥": "volgograd",
    "–≤–æ–ª–æ–≥–¥–∞": "vologda",
    "–≤–æ—Ä–æ–Ω–µ–∂": "voronezh",
    "–º–∞—Ö–∞—á–∫–∞–ª–∞": "makhachkala",
    "–¥–æ–Ω–µ—Ü–∫": "donetsk",
    "–±–∏—Ä–æ–±–∏–¥–∂–∞–Ω": "birobidzhan",
    "—á–∏—Ç–∞": "chita",
    "–±–µ—Ä–¥—è–Ω—Å–∫": "berdyansk",
    "–∏–≤–∞–Ω–æ–≤–æ": "ivanovo",
    "–Ω–∞–∑–∞—Ä—è–Ω": "nazran",
    "–∏—Ä–∫—É—Ç—Å–∫": "irkutsk",
    "–Ω–∞–ª—å—á–∏–∫": "nalchik",
    "–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": "kaliningrad",
    "—ç–ª–∏—Å—Ç–∞": "elista",
    "–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫": "petropavlovsk",
    "—á–µ—Ä–∫–µ—Å—Å–∫": "cherkessk",
    "–ø–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫": "petrozavodsk",
    "–∫–µ–º–µ—Ä–æ–≤–æ": "kemerovo",
    "–∫–∏—Ä–æ–≤": "kirov",
    "—Å—ã–∫—Ç—ã–≤–∫–∞—Ä": "syktyvkar",
    "–∫–æ—Å—Ç—Ä–æ–º–∞": "kostroma",
    "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä": "krasnodar",
    "–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "krasnoyarsk",
    "—Å–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å": "simferopol",
    "–∫—É—Ä–≥–∞–Ω": "kurgan",
    "–ª–∏–ø–µ—Ü–∫": "lipetsk",
    "–ª—É–≥–∞–Ω—Å–∫": "luhansk",
    "–º–∞–≥–∞–¥–∞–Ω": "magadan",
    "–π–æ—à–∫–∞—Ä-–æ–ª–∞": "joskar-ola",
    "—Å–∞—Ä–∞–Ω—Å–∫": "saransk",
    "–º—É—Ä–º–∞–Ω—Å–∫": "murmansk",
    "–Ω–∞—Ä—å—è–Ω-–º–∞—Ä": "naryan-mar",
    "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": "nizhny-novgorod",
    "–Ω–æ–≤–≥–æ—Ä–æ–¥": "novgorod",
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "novosibirsk",
    "–æ–º—Å–∫": "omsk",
    "–æ—Ä–µ–Ω–±—É—Ä–≥": "orenburg",
    "–æ—Ä—ë–ª": "orel",
    "–ø–µ–Ω–∑–∞": "penza",
    "–ø–µ—Ä–º—å": "perm",
    "–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫": "vladivostok",
    "–ø—Å–∫–æ–≤": "pskov",
    "—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É": "rostov-na-donu",
    "—Ä—è–∑–∞–Ω—å": "ryazan",
    "—Å–∞–º–∞—Ä–∞": "samara",
    "—Å–∞—Ä–∞—Ç–æ–≤": "saratov",
    "—è–∫—É—Ç—Å–∫": "yakutsk",
    "—é–∂–Ω–æ-—Å–∞—Ö–∞–ª–∏–Ω—Å–∫": "yuzhno-sakhalinsk",
    "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "yekaterinburg",
    "–≤–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑": "vladikavkaz",
    "—Å–º–æ–ª–µ–Ω—Å–∫": "smolensk",
    "—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å": "stavropol",
    "—Ç–∞–º–±–æ–≤": "tambov",
    "–∫–∞–∑–∞–Ω—å": "kazan",
    "–∞–±–∞–∫–∞–Ω": "abakan",
    "—Ç—é–º–µ–Ω—å": "tyumen",
    "–∏–∂–µ–≤—Å–∫": "izhevsk",
    "—É–ª—å—è–Ω–æ–≤—Å–∫": "ulyanovsk",
    "—Ö–∞–±–∞—Ä–æ–≤—Å–∫": "khabarovsk",
    "–≥—Ä–æ–∑–Ω—ã–π": "grozny",
    "—á–µ–±–æ–∫—Å–∞—Ä—ã": "cheboksary",
    "–∞–Ω–∞–¥—ã—Ä—å": "anadyr",
    "—Å–∞–ª–µ—Ö–∞—Ä–¥": "salehard",
    "–≤—è–∑—å–º–∞": "vyazma",
    "–≥–∞–≥–∞—Ä–∏–Ω": "gagarin",
    "—Ä–æ—Å–ª–∞–≤–ª—å": "roslavl",
    "—Å–º–æ–ª–µ–Ω—Å–∫": "smolensk",
    "–∂–µ—Ä–¥–µ–≤–∫–∞": "zerdevka",
    "–∫–∏—Ä—Å–∞–Ω–æ–≤": "kirsanov",
    "–º–∏—á—É—Ä–∏–Ω—Å–∫": "michurinsk",
    "–º–æ—Ä—à–∞–Ω—Å–∫": "morshansk",
    "–æ–±–ª–æ–≤–∫–∞": "oblovka",
    "—Å–æ–≤—Ö–æ–∑ –∏–º.–ª–µ–Ω–∏–Ω–∞": "sovkhoz_im_len",
    "—Ç–∞–º–±–æ–≤ –∞–º—Å–≥": "tambov",
    "–∞–Ω–∞–ø–∞": "anapa",
    "–∞—Ä–º–∞–≤–∏—Ä": "armavir",
    "–±–µ–ª–∞—è –≥–ª–∏–Ω–∞": "belaya_glina",
    "–≥–µ–ª–µ–Ω–¥–∂–∏–∫": "gelendzhik",
    "–≥–æ—Ä—è—á–∏–π –∫–ª—é—á": "goryachiy_klyuch",
    "–¥–∂—É–±–≥–∞": "dzhubga",
    "–¥–æ–ª–∂–∞–Ω—Å–∫–∞—è": "dolzhanskaya",
    "–µ–π—Å–∫": "eysk",
    "–∫–∞–Ω–µ–≤—Å–∫–∞—è": "kanevskaya",
    "–∫—Ä–∞—Å–Ω–∞—è –ø–æ–ª—è–Ω–∞": "krasnaya_polyana",
    "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä": "krasnodar",
    "–∫—Ä–æ–ø–æ—Ç–∫–∏–Ω": "kropotkin",
    "–∫—Ä—ã–º—Å–∫": "krymsk",
    "–∫—É–±–∞–Ω—Å–∫–∞—è": "kubanskaya",
    "–∫—É—â–µ–≤—Å–∫–∞—è": "kushchevskaya",
    "–Ω–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫": "novorossiysk",
    "–ø—Ä–∏–º–æ—Ä—Å–∫–æ-–∞—Ö—Ç–∞—Ä—Å–∫": "primorsko_akhtarsk",
    "—Å–ª–∞–≤—è–Ω—Å–∫-–Ω–∞-–∫—É–±–∞–Ω–∏": "slavyansk_na_kubani",
    "—Å–æ—á–∏": "sochi_adler",
    "—Ç–∞–º–∞–Ω—å": "tamany",
    "—Ç–∏—Ö–æ—Ä–µ—Ü–∫": "tikhoretsk",
    "—Ç—É–∞–ø—Å–µ": "tuapse",
    "—É—Å—Ç—å-–ª–∞–±–∏–Ω—Å–∫": "ust_labinsk",
    "–±–µ–ª–æ–≥–æ—Ä–∫–∞": "belogorka",
    "–≤–∏–Ω–Ω–∏—Ü—ã": "vinnitsy",
    "–≤–æ–∑–Ω–µ—Å–µ–Ω—å–µ": "voznesenye",
    "–≤–æ–ª–æ—Å–æ–≤–æ": "volosovo",
    "–≤—ã–±–æ—Ä–≥": "vyborg",
    "–µ—Ñ–∏–º–æ–≤—Å–∫–∞—è": "efimovskaya",
    "–∫–∏–Ω–≥–∏—Å–µ–ø–ø": "kingisepp",
    "–∫–∏—Ä–∏—à–∏": "kirishi",
    "–ª–æ–¥–µ–π–Ω–æ–µ –ø–æ–ª–µ": "lodeynoye_pole",
    "–ª—É–≥–∞": "luga",
    "–Ω–∏–∫–æ–ª–∞–µ–≤—Å–∫–∞—è": "nikolaevskaya",
    "–Ω–æ–≤–∞—è –ª–∞–¥–æ–≥–∞": "novaya_ladoga",
    "–æ–∑–µ—Ä–∫–∏": "ozerki",
    "–ø–µ—Ç—Ä–æ–∫—Ä–µ–ø–æ—Å—Ç—å": "petrokrepost",
    "–ø—Ä–∏–æ–∑–µ—Ä—Å–∫": "priozersk",
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "sankt_peterburg",
    "—Å–æ—Å–Ω–æ–≤–æ": "sosnovo",
    "—Ç–∏—Ö–≤–∏–Ω": "tikhvin",
    "–ø–µ—Ä–µ—Å–ª–∞–≤–ª—å-–∑–∞–ª–µ—Å—Å–∫–∏–π": "pereslavl_zalesskiy",
    "–ø–æ—à–µ—Ö–æ–Ω—å–µ": "poshekhonye",
    "—Ä–æ—Å—Ç–æ–≤": "rostov",
    "—Ä—ã–±–∏–Ω—Å–∫": "rybinsk",
    "—è—Ä–æ—Å–ª–∞–≤–ª—å": "yaroslavl",
    "–≤–æ–ª–æ–≤–æ": "volovo",
    "–µ—Ñ—Ä–µ–º–æ–≤": "efremov",
    "–Ω–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫": "novomoskovsk",
    "—Ç—É–ª–∞": "tula",
    "–∞–Ω–Ω–∞": "anna",
    "–±–æ–≥—É—á–∞—Ä": "boguchar",
    "–±–æ—Ä–∏—Å–æ–≥–ª–µ–±—Å–∫": "borisoglebsk",
    "–≤–æ—Ä–æ–Ω–µ–∂": "voronezh_1",
    "–∫–∞–ª–∞—á": "kalach",
    "–ª–∏—Å–∫–∏": "liski",
    "–ø–∞–≤–ª–æ–≤—Å–∫": "pavlovsk",
    "–∞—Ä–∑–∞–º–∞—Å": "arzamas",
    "–≤–µ—Ç–ª—É–≥–∞": "vetluga",
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫–æ–µ": "voskresenskoe",
    "–≤—ã–∫—Å–∞": "vyksa",
    "–≥–æ—Ä–æ–¥–µ—Ü –≤–æ–ª–∂—Å–∫–∞—è –≥–º–æ": "gorodets_volzhskaya_gmo",
    "–∫—Ä–∞—Å–Ω—ã–µ –±–∞–∫–∏": "krasnye_baki",
    "–ª—É–∫–æ—è–Ω–æ–≤": "lukoyanov",
    "–ª—ã—Å–∫–æ–≤–æ": "lyskovo",
    "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥-1": "nizhny_novgorod",
    "–ø–∞–≤–ª–æ–≤–æ": "pavlovo",
    "—Å–µ—Ä–≥–∞—á": "sergach",
    "—à–∞—Ö—É–Ω—å—è": "shakhunya",
    "–∞–ª–∞–ø–∞–µ–≤—Å–∫": "alapaevsk",
    "–∞—Ä—Ç–µ–º–æ–≤—Å–∫–∏–π": "artemovsky",
    "–±–∏—Å–µ—Ä—Ç—å": "biserte",
    "–≤–µ—Ä—Ö–Ω–µ–µ –¥—É–±—Ä–æ–≤–æ": "verhnee_dubrovo",
    "–≤–µ—Ä—Ö–æ—Ç—É—Ä—å–µ": "verhoturye",
    "–≤–∏—Å–∏–º": "visim",
    "–≥–∞—Ä–∏": "gari",
    "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "ekaterinburg",
    "–∏–≤–¥–µ–ª—å": "ivdel",
    "–∏—Ä–±–∏—Ç-—Ñ–æ–º–∏–Ω–æ": "irbit_fomino",
    "–∫–∞–º–µ–Ω—Å–∫-—É—Ä–∞–ª—å—Å–∫–∏–π": "kamensk_uralsky",
    "–∫–∞–º—ã—à–ª–æ–≤": "kamyshlov",
    "–∫–æ–ª—å—Ü–æ–≤–æ": "kolcovo",
    "–∫—Ä–∞—Å–Ω–æ—É—Ñ–∏–º—Å–∫": "krasnoufimsk",
    "–∫—É—à–≤–∞": "kushva",
    "–∫—ã—Ç–ª—ã–º": "kytlym",
    "–º–∏—Ö–∞–π–ª–æ–≤—Å–∫": "mihaylovsk",
    "–Ω–µ–≤—å—è–Ω—Å–∫": "nev'yansk",
    "–Ω–∏–∂–Ω–∏–π —Ç–∞–≥–∏–ª": "nizhny_tagil",
    "–ø–æ–Ω–∏–ª": "ponil",
    "—Ä–µ–≤–¥–∞": "revda",
    "—Å–µ–≤–µ—Ä–æ—É—Ä–∞–ª—å—Å–∫": "severouralsk",
    "—Å–µ—Ä–æ–≤": "serov",
    "—Å—ã—Å–µ—Ä—Ç—å": "sysert",
    "—Ç–∞–±–æ—Ä—ã": "tabory",
    "—Ç–∞–≤–¥–∞": "tavda",
    "—Ç—É–≥—É–ª—ã–º": "tugulym",
    "—Ç—É—Ä–∏–Ω—Å–∫": "turinsk",
    "—à–∞–º–∞—Ä—ã": "shamary",
    "–≤–æ–ª–≥–æ–≥—Ä–∞–¥": "volgograd",
    "–≤–æ–ª–∂—Å–∫–∏–π": "volzhsky",
    "–¥–∞–Ω–∏–ª–æ–≤–∫–∞": "danilovka",
    "–µ–ª–∞–Ω—å": "elan",
    "–∏–ª–æ–≤–ª—è": "ilovlya",
    "–∫–∞–º—ã—à–∏–Ω": "kamyshin",
    "–º–∏—Ö–∞–π–ª–æ–≤–∫–∞": "mihailovka",
    "–Ω–∏–∂–Ω–∏–π —á–∏—Ä": "nizhny_chir",
    "–ø–∞–ª–∞—Å–æ–≤–∫–∞": "pallasovka",
    "—Å–µ—Ä–∞—Ñ–∏–º–æ–≤–∏—á": "serafimovich",
    "—É—Ä—é–ø–∏–Ω—Å–∫": "uryupinsk",
    "—Ñ—Ä–æ–ª–æ–≤–æ": "frolovo",
    "—ç–ª—å—Ç–æ–Ω": "elton",
    "–±–æ–ª—å—à–∏–µ –∫–∞–π–±–∏—Ü—ã": "bolshie_kaybitsy",
    "–±—É–≥—É–ª—å–º–∞": "bugulma",
    "–µ–ª–∞–±—É–≥–∞": "elabuga",
    "–∫–∞–∑–∞–Ω—å": "kazan",
    "–ª–∞–∏—à–µ–≤–æ": "laishevo",
    "–º—É—Å–ª—é–º–æ–≤–æ": "muslyumovo_1",
    "–Ω–∞–±–µ—Ä–µ–∂–Ω—ã–µ —á–µ–ª–Ω—ã": "naberezhnye_chelny",
    "—Ç–µ—Ç—é—à–∏": "tetyushi",
    "—á–∏—Å—Ç–æ–ø–æ–ª—å": "chistopol",
    "—á–∏—Å—Ç–æ–ø–æ–ª—å": "chistopol_b",
    "—á—É–ª–ø–∞–Ω–æ–≤–æ": "chulpanovo"
}

@bot.message_handler(commands=['stations'])
def send_weather_stations(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å):")
    bot.register_next_step_handler(message, get_region)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞
def get_region(message):
    region_name = message.text.lower().strip()
    
    if region_name not in regions_dict:
        bot.send_message(message.chat.id, "–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
        return
    
    region_code = regions_dict[region_name]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö–ª–∏–Ω):")
    bot.register_next_step_handler(message, get_station, region=region_code)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
def get_station(message, region):
    station_name = message.text.lower().strip()

    if station_name not in stations_dict:
        bot.send_message(message.chat.id, "–£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏
    station_code = stations_dict[station_name]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ –∏ —Å—Ç–∞–Ω—Ü–∏–∏
    url = f"https://meteoinfo.ru/pogoda/russia/{region}/{station_code}"

    try:
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É
        response = requests.get(url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code != 200:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏ —Å—Ç–∞–Ω—Ü–∏–∏.")
            return

        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        soup = BeautifulSoup(response.text, "html.parser")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        update_time = soup.find("td", {"colspan": "2", "align": "right"})
        update_time = update_time.text.strip() if update_time else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ
        table = soup.find("table", {"border": "0", "style": "width:100%"})
        if not table:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.")
            return

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
        weather_data = {}

        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        rows = table.find_all("tr")
        for row in rows:
            columns = row.find_all("td")
            if len(columns) == 2:
                parameter = columns[0].text.strip()  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                value = columns[1].text.strip()  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                weather_data[parameter] = value

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ
        message_text = f"üìç –ü–æ–≥–æ–¥–∞ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏: {station_name.capitalize()}\n\n"
        message_text += f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}\n\n"
        message_text += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {weather_data.get('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞, ¬∞C', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} ¬∞C\n"
        message_text += f"üå°Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data.get('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} ¬∞C\n"
        message_text += f"üí® –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather_data.get('–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞, –º/—Å', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} –º/—Å\n"
        message_text += f"‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {weather_data.get('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        message_text += f"üîΩ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {weather_data.get('–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ç–∞–Ω—Ü–∏–∏, –º–º —Ä—Ç.—Å—Ç.', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} –º–º —Ä—Ç.—Å—Ç.\n"
        message_text += f"üíß –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data.get('–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å, %', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} %\n"
        message_text += f"üå´Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å: {weather_data.get('–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å, –∫–º', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} –∫–º\n"
        message_text += f"‚òÅÔ∏è –ë–∞–ª–ª –æ–±—â–µ–π –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏: {weather_data.get('–ë–∞–ª–ª –æ–±—â–µ–π –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        message_text += f"üå®Ô∏è –û—Å–∞–¥–∫–∏ –∑–∞ 12 —á–∞—Å–æ–≤: {weather_data.get('–û—Å–∞–¥–∫–∏ –∑–∞ 12 —á–∞—Å–æ–≤, –º–º', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} –º–º\n"
        message_text += f"‚ùÑÔ∏è –í—ã—Å–æ—Ç–∞ —Å–Ω–µ–∂–Ω–æ–≥–æ –ø–æ–∫—Ä–æ–≤–∞: {weather_data.get('–í—ã—Å–æ—Ç–∞ —Å–Ω–µ–∂–Ω–æ–≥–æ –ø–æ–∫—Ä–æ–≤–∞, —Å–º', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} —Å–º\n\n"
        message_text += "–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ì–∏–¥—Ä–æ–º–µ—Ç—Ü–µ–Ω—Ç—Ä–æ–º –†–æ—Å—Å–∏–∏"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, message_text)

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
# echo-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–π meteoinfo.ru

@bot.message_handler(commands=['support'])
def get_support(message):
    bot.send_message(message.from_user.id, 'üõ†Ô∏è –î–ª—è —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –Ω–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É: pogoda.radar@inbox.ru')
# echo-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞

@bot.message_handler(content_types=['text'])
def error_404(message):
    bot.send_message(message.from_user.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help.')

keep_alive()#–∑–∞–ø—É—Å–∫–∞–µ–º flask-—Å–µ—Ä–≤–µ—Ä
def start_bot():
  while True:
    try:
        bot.polling(none_stop=True, interval=0) #–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞! {str(e)}")

start_bot()
